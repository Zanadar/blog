{ "posts": [
  {
    "id": 1,
      "uuid": "63202872-b050-47af-a9f2-9bd9efa8fb40",
      "title": "'Hello World'",
      "slug": "hello-world",
      "markdown": "üñã‚úíÔ∏èüî©‚õè\n\nI've been meaning to start a blog for a long time and sometimes the best way to get started on a habit is to find an excuse. So...I'm starting at the [Recurse Center](http://www.recurse.com) next Monday, Feb. 8, 2016 in the Spring 1 batch. I'll be writing daily update posts and longer summary posts once a week.üëè\n\n###### Why \nIts been a great couple years from my journey of zero coding (okay I could hack around a terminal a bit) to becoming a (sorta) competent programmer. I've worked mostly in Ruby and Rails, with a bit of Javascript. Rails was a great entree to programming - and yet - well I won't speak ill if the dead. Along the way I fell in love with the so called 'open web' (mostly `Javascript`). I've been wanting to get much better as a javascript programmer and really build some cool stuff with `node` but life as usual kinda gets in the way...Until it provides you an opening you never saw coming.\n\n###### Howü§ò\nThe company where I worked folded and this kinda threw my plans into the works...but as I said before having an excuse from the universe can really make things easier. And so rather than going right back on the market I get to spend a few months getting _a lot_ better as a programmer and, more importantly, connecting with a community of people who really love this stuff.\n\nStay tuned. Its gonna fuckin' rule.üëª",
      "html": "<p>üñã‚úíÔ∏èüî©‚õè</p>\n\n<p>I've been meaning to start a blog for a long time and sometimes the best way to get started on a habit is to find an excuse. So...I'm starting at the <a href=\"http://www.recurse.com\">Recurse Center</a> next Monday, Feb. 8, 2016 in the Spring 1 batch. I'll be writing daily update posts and longer summary posts once a week.üëè</p>\n\n<h6 id=\"why\">Why</h6>\n\n<p>Its been a great couple years from my journey of zero coding (okay I could hack around a terminal a bit) to becoming a (sorta) competent programmer. I've worked mostly in Ruby and Rails, with a bit of Javascript. Rails was a great entree to programming - and yet - well I won't speak ill if the dead. Along the way I fell in love with the so called 'open web' (mostly <code>Javascript</code>). I've been wanting to get much better as a javascript programmer and really build some cool stuff with <code>node</code> but life as usual kinda gets in the way...Until it provides you an opening you never saw coming.</p>\n\n<h6 id=\"how\">Howü§ò</h6>\n\n<p>The company where I worked folded and this kinda threw my plans into the works...but as I said before having an excuse from the universe can really make things easier. And so rather than going right back on the market I get to spend a few months getting <em>a lot</em> better as a programmer and, more importantly, connecting with a community of people who really love this stuff.</p>\n\n<p>Stay tuned. Its gonna fuckin' rule.üëª</p>",
      "image": null,
      "featured": 0,
      "page": 0,
      "status": "published",
      "language": "en_US",
      "meta_title": null,
      "meta_description": null,
      "author_id": 1,
      "created_at": "2016-02-03T00:26:40.000Z",
      "created_by": 1,
      "updated_at": "2016-02-12T20:09:50.000Z",
      "updated_by": 1,
      "published_at": "2016-02-03T00:26:40.000Z",
      "published_by": 1,
      "visibility": "public",
      "mobiledoc": null,
      "amp": null
  },
    {
      "id": 2,
      "uuid": "02b907ee-e62b-467f-99e5-cbc084146ee7",
      "title": "02_12",
      "slug": "02_12",
      "markdown": "###### Did\n- Meditated\n- Redid `binarySearch` and `mergeSort` from Khan academy\n- Published a module to randomly sort an array `cl-rando`\n- Published a module with to house all the algorithm work I'm doing `zm-algo`\n- Read @mafintosh blog and wrote him on twitter\n- Imported days into blog\n- Set up subdomains on the blog\n- Read 10 pages of Cracking the coding interview (!UGH this sucks!)\n- Ate at `banh-mi saigon`  (yes that is code...for ==amazing==)\n- Changed blog __About Me__ to be terser (is that a word?)\n- Input other daily logs onto the blog\n- Hooked blog up to blaggerator\n- Started a quick port scanner in node\n\n",
      "html": "<h6 id=\"did\">Did</h6>\n\n<ul>\n<li>Meditated</li>\n<li>Redid <code>binarySearch</code> and <code>mergeSort</code> from Khan academy</li>\n<li>Published a module to randomly sort an array <code>cl-rando</code></li>\n<li>Published a module with to house all the algorithm work I'm doing <code>zm-algo</code></li>\n<li>Read @mafintosh blog and wrote him on twitter</li>\n<li>Imported days into blog</li>\n<li>Set up subdomains on the blog</li>\n<li>Read 10 pages of Cracking the coding interview (!UGH this sucks!)</li>\n<li>Ate at <code>banh-mi saigon</code>  (yes that is code...for <mark>amazing</mark>)</li>\n<li>Changed blog <strong>About Me</strong> to be terser (is that a word?)</li>\n<li>Input other daily logs onto the blog</li>\n<li>Hooked blog up to blaggerator</li>\n<li>Started a quick port scanner in node</li>\n</ul>",
      "image": null,
      "featured": 0,
      "page": 0,
      "status": "published",
      "language": "en_US",
      "meta_title": null,
      "meta_description": "What i did on 2_12",
      "author_id": 1,
      "created_at": "2016-02-03T00:45:29.000Z",
      "created_by": 1,
      "updated_at": "2016-02-12T22:48:12.000Z",
      "updated_by": 1,
      "published_at": "2016-02-12T16:45:00.000Z",
      "published_by": 1,
      "visibility": "public",
      "mobiledoc": null,
      "amp": null
    },
    {
      "id": 3,
      "uuid": "a2161d2f-36b1-40ee-aadb-05f0f1f65f01",
      "title": "About Me",
      "slug": "about",
      "markdown": "I'm a hacker in the old-school sense. Plain and simple. Taught myself by reading and writing code.\n\n- [Github](https://github.com/zanadar/)\n- [Twithub](https://twitter.com/zandermackie)\n\n",
      "html": "<p>I'm a hacker in the old-school sense. Plain and simple. Taught myself by reading and writing code.</p>\n\n<ul>\n<li><a href=\"https://github.com/zanadar/\">Github</a></li>\n<li><a href=\"https://twitter.com/zandermackie\">Twithub</a></li>\n</ul>",
      "image": null,
      "featured": 0,
      "page": 1,
      "status": "published",
      "language": "en_US",
      "meta_title": null,
      "meta_description": null,
      "author_id": 1,
      "created_at": "2016-02-03T16:52:14.000Z",
      "created_by": 1,
      "updated_at": "2016-02-12T20:01:18.000Z",
      "updated_by": 1,
      "published_at": "2016-02-03T16:56:52.000Z",
      "published_by": 1,
      "visibility": "public",
      "mobiledoc": null,
      "amp": null
    },
    {
      "id": 4,
      "uuid": "ad66708b-6113-4212-bf95-ec2399ec8aa0",
      "title": "02_11",
      "slug": "02_11",
      "markdown": "###### Did\n- Built a module called `uptick` to help with Nand2Tetris work\n- Got `uptick` to work as a global bash thing \n```javascript\necho -e 'test[0]\\n test[0]' | uptick => \n\n$ test[0]\n  test[1]\n```\n- Most cool is that you can select text in vim and run `'<,'>!uptick` and it'll work!!!\n- Meditated\n- Did some bad vim search-replace\n- Updated Readme and published new version of `uptick`\n- Completed the chips in Ch. 1 of Nand2Tetris \n- Spent a long time tinkering with Wireshark to figure out Bittorrent protocol stuff\n- Got a tracker announce request working for `Bittorrent`\n- Started the process of parsing the `peers` key in the tracker response -> Mostly looks like garbage\n- Presentations\n- Game Night\n- Had really good talks with:\n   - __Ben__ (thanks for the help on the encoding issue for the bittorrent `peer` (six bytes each represent the ip and port) \n  - __Hari__ (thanks for the awesome stuff about network program and the encouragment to stretch myself)\n",
      "html": "<h6 id=\"did\">Did</h6>\n\n<ul>\n<li>Built a module called <code>uptick</code> to help with Nand2Tetris work</li>\n<li>Got <code>uptick</code> to work as a global bash thing </li>\n</ul>\n\n<pre><code class=\"language-javascript\">echo -e 'test[0]\\n test[0]' | uptick =&gt; \n\n$ test[0]\n  test[1]\n</code></pre>\n\n<ul>\n<li>Most cool is that you can select text in vim and run <code>'&lt;,'&gt;!uptick</code> and it'll work!!!</li>\n<li>Meditated</li>\n<li>Did some bad vim search-replace</li>\n<li>Updated Readme and published new version of <code>uptick</code></li>\n<li>Completed the chips in Ch. 1 of Nand2Tetris </li>\n<li>Spent a long time tinkering with Wireshark to figure out Bittorrent protocol stuff</li>\n<li>Got a tracker announce request working for <code>Bittorrent</code></li>\n<li>Started the process of parsing the <code>peers</code> key in the tracker response -> Mostly looks like garbage</li>\n<li>Presentations</li>\n<li>Game Night</li>\n<li>Had really good talks with:\n<ul><li><strong>Ben</strong> (thanks for the help on the encoding issue for the bittorrent <code>peer</code> (six bytes each represent the ip and port) </li>\n<li><strong>Hari</strong> (thanks for the awesome stuff about network program and the encouragment to stretch myself)</li></ul></li>\n</ul>",
      "image": null,
      "featured": 0,
      "page": 0,
      "status": "published",
      "language": "en_US",
      "meta_title": null,
      "meta_description": null,
      "author_id": 1,
      "created_at": "2016-02-12T20:16:29.000Z",
      "created_by": 1,
      "updated_at": "2016-02-12T21:03:44.000Z",
      "updated_by": 1,
      "published_at": "2016-02-11T20:28:00.000Z",
      "published_by": 1,
      "visibility": "public",
      "mobiledoc": null,
      "amp": null
    },
    {
      "id": 5,
      "uuid": "67545070-8502-4c57-a9da-b1fbdbc77a6c",
      "title": "02_10",
      "slug": "02_10",
      "markdown": "###### Did\n- Meditated\n- Had lunch with former Skilledup people -> Ali got a job at Twitch üéÆ\n- Installed Java ‚òïÔ∏è\n- Installed Nand2Tetris tools\n- Had Nand2Tetris working session\n- Worked on Boolean algebra -> Write out truth table, come up with Boolean formula for a chip, check it\n  against the truth table\n- Installed vim syntax highlighting for Nand2Tetris\n- Went to session about choosing and scoping projects\n- Worked through `Not`, `And`, `Nor`, `Xor`, `Mux`, `Demux` chips using primitives (starting with `Nand`)\n- Learned about [De Morgan's Laws](https://en.wikipedia.org/wiki/De_Morgan's_laws)\n\n>The negation of a conjunction is the disjunction of the negations. \n\n>The negation of a disjunction is the conjunction of the negations.\n<br>\n\n``` bash\n!(A && B) == (!A) | (!B)\n!(A | B) == (!A) && (!B)\n```\n > If you think this is silly (talking to myself here...) look at how Yan used DeMorgan to find [minifier backdooring bug](https://zyan.scripts.mit.edu/blog/)\n\n- Built a 1-to-2 line decoder with tests in `hdl`. This is apparrently useful for bussing.\n- Build a Node module called `uptick` for a transform stream that increments numbers in brackets. This is useful for eg `Or(a=in[1], b=in[0],\n  out=out[2])`\n- This may be something I can use in Vim -> pipe a buffer to command line and back to buffer\n- Started working on making it a CLI\n",
      "html": "<h6 id=\"did\">Did</h6>\n\n<ul>\n<li>Meditated</li>\n<li>Had lunch with former Skilledup people -> Ali got a job at Twitch üéÆ</li>\n<li>Installed Java ‚òïÔ∏è</li>\n<li>Installed Nand2Tetris tools</li>\n<li>Had Nand2Tetris working session</li>\n<li>Worked on Boolean algebra -> Write out truth table, come up with Boolean formula for a chip, check it\nagainst the truth table</li>\n<li>Installed vim syntax highlighting for Nand2Tetris</li>\n<li>Went to session about choosing and scoping projects</li>\n<li>Worked through <code>Not</code>, <code>And</code>, <code>Nor</code>, <code>Xor</code>, <code>Mux</code>, <code>Demux</code> chips using primitives (starting with <code>Nand</code>)</li>\n<li>Learned about <a href=\"https://en.wikipedia.org/wiki/De_Morgan's_laws\">De Morgan's Laws</a></li>\n</ul>\n\n<blockquote>\n  <p>The negation of a conjunction is the disjunction of the negations. </p>\n  \n  <p>The negation of a disjunction is the conjunction of the negations.\n  <br></p>\n</blockquote>\n\n<pre><code class=\"language- bash\">!(A &amp;&amp; B) == (!A) | (!B)\n!(A | B) == (!A) &amp;&amp; (!B)\n</code></pre>\n\n<blockquote>\n  <p>If you think this is silly (talking to myself here...) look at how Yan used DeMorgan to find <a href=\"https://zyan.scripts.mit.edu/blog/\">minifier backdooring bug</a></p>\n</blockquote>\n\n<ul>\n<li>Built a 1-to-2 line decoder with tests in <code>hdl</code>. This is apparrently useful for bussing.</li>\n<li>Build a Node module called <code>uptick</code> for a transform stream that increments numbers in brackets. This is useful for eg <code>Or(a=in[1], b=in[0],\nout=out[2])</code></li>\n<li>This may be something I can use in Vim -> pipe a buffer to command line and back to buffer</li>\n<li>Started working on making it a CLI</li>\n</ul>",
      "image": null,
      "featured": 0,
      "page": 0,
      "status": "published",
      "language": "en_US",
      "meta_title": null,
      "meta_description": null,
      "author_id": 1,
      "created_at": "2016-02-12T20:34:09.000Z",
      "created_by": 1,
      "updated_at": "2016-02-12T20:55:42.000Z",
      "updated_by": 1,
      "published_at": "2016-02-10T20:34:00.000Z",
      "published_by": 1,
      "visibility": "public",
      "mobiledoc": null,
      "amp": null
    },
    {
      "id": 6,
      "uuid": "2efa8aa1-577b-48c4-8a50-0aede250316a",
      "title": "02_09",
      "slug": "02_09",
      "markdown": "###### Did\n- Met with Nand2Tetris Group\n- Had lunch with sam and andrew LG\n- Learned about wireshark for bittorrent -> Open up some torrent, filter with the bitorrent filter, and as\n  that populates, you can follow a conversation (in statics) with the current filter applied, and then filter by that\n  conversation.\n- Read API for `bencode` package on NPM (really good, takes data an object, can output object or buffers)\n- Read through the code of `bittorrent-tracker` which was helpful for understanding the flow of things.\n- Started to read through documenation about encoding in JS -> still confused by \n> \"The url must be properly\n  percent encoded using the ‚Äú%nn‚Äù format, where ‚Äònn‚Äô is the hexadecimal value of the byte or reserved\n  character. Unreserved characters need not be escaped (see link for reference). For example, the escaped form\n  of the binary string ‚Äò\\xab‚Äô is ‚Äò%AB‚Äô and the escaped form of ‚Äò\\x12\\x34\\x56\\x78\\x9a‚Äô is ‚Äò%124Vx%9A‚Äô. \" but it\n  seems to be something that the node querystring library can handle\n\n- Got a basic torrent read going and filtering on the array of trackers, which are http & udp\n",
      "html": "<h6 id=\"did\">Did</h6>\n\n<ul>\n<li>Met with Nand2Tetris Group</li>\n<li>Had lunch with sam and andrew LG</li>\n<li>Learned about wireshark for bittorrent -> Open up some torrent, filter with the bitorrent filter, and as\nthat populates, you can follow a conversation (in statics) with the current filter applied, and then filter by that\nconversation.</li>\n<li>Read API for <code>bencode</code> package on NPM (really good, takes data an object, can output object or buffers)</li>\n<li>Read through the code of <code>bittorrent-tracker</code> which was helpful for understanding the flow of things.</li>\n<li><p>Started to read through documenation about encoding in JS -> still confused by </p>\n\n<blockquote>\n  <p>\"The url must be properly\n  percent encoded using the ‚Äú%nn‚Äù format, where ‚Äònn‚Äô is the hexadecimal value of the byte or reserved\n  character. Unreserved characters need not be escaped (see link for reference). For example, the escaped form\n  of the binary string ‚Äò\\xab‚Äô is ‚Äò%AB‚Äô and the escaped form of ‚Äò\\x12\\x34\\x56\\x78\\x9a‚Äô is ‚Äò%124Vx%9A‚Äô. \" but it\n  seems to be something that the node querystring library can handle</p>\n</blockquote></li>\n<li><p>Got a basic torrent read going and filtering on the array of trackers, which are http &amp; udp</p></li>\n</ul>",
      "image": null,
      "featured": 0,
      "page": 0,
      "status": "published",
      "language": "en_US",
      "meta_title": null,
      "meta_description": null,
      "author_id": 1,
      "created_at": "2016-02-12T21:00:42.000Z",
      "created_by": 1,
      "updated_at": "2016-02-12T21:01:49.000Z",
      "updated_by": 1,
      "published_at": "2016-02-09T21:00:00.000Z",
      "published_by": 1,
      "visibility": "public",
      "mobiledoc": null,
      "amp": null
    },
    {
      "id": 7,
      "uuid": "e4060d6b-733e-4b40-b65b-12377ed80ab9",
      "title": "02_08",
      "slug": "02_08",
      "markdown": "##### YAY!!!! ü§ò üëª\n```javascript\nfunction Today (opts) {\n  if (!opts) opts = {}\n  this.day = opts.day\n  this.recurse = opts.recurse\n  this.radness = opts.sweet\n}\n\nvar monday = new Today({day: 'at', recurse: 'center', sweet: 'sweet!'})\n```\n_This'll be the first of many daily logs (which I'll probably mostly do on Fridays._\n\n##### Did\n- Started `bencode.decode`\n- Went to Meet-and-greet (speed-dating)\n- Went to intro sitdown\n- Went to lunch\n- Met lots of people\n- Met with Allie & talked through projects\n- Joined Nand2Tetris Study group\n- Meditated\n- Started reading Ch. 1 Nand2Tetris\n- Had dinner with rose, ben, & ben\n\n",
      "html": "<h5 id=\"yay\">YAY!!!! ü§ò üëª</h5>\n\n<pre><code class=\"language-javascript\">function Today (opts) {  \n  if (!opts) opts = {}\n  this.day = opts.day\n  this.recurse = opts.recurse\n  this.radness = opts.sweet\n}\n\nvar monday = new Today({day: 'at', recurse: 'center', sweet: 'sweet!'})  \n</code></pre>\n\n<p><em>This'll be the first of many daily logs (which I'll probably mostly do on Fridays.</em></p>\n\n<h5 id=\"did\">Did</h5>\n\n<ul>\n<li>Started <code>bencode.decode</code></li>\n<li>Went to Meet-and-greet (speed-dating)</li>\n<li>Went to intro sitdown</li>\n<li>Went to lunch</li>\n<li>Met lots of people</li>\n<li>Met with Allie &amp; talked through projects</li>\n<li>Joined Nand2Tetris Study group</li>\n<li>Meditated</li>\n<li>Started reading Ch. 1 Nand2Tetris</li>\n<li>Had dinner with rose, ben, &amp; ben</li>\n</ul>",
      "image": null,
      "featured": 0,
      "page": 0,
      "status": "published",
      "language": "en_US",
      "meta_title": null,
      "meta_description": null,
      "author_id": 1,
      "created_at": "2016-02-12T21:04:09.000Z",
      "created_by": 1,
      "updated_at": "2016-02-12T21:12:30.000Z",
      "updated_by": 1,
      "published_at": "2016-02-08T21:04:00.000Z",
      "published_by": 1,
      "visibility": "public",
      "mobiledoc": null,
      "amp": null
    },
    {
      "id": 8,
      "uuid": "33444262-0227-4139-8bb6-2d14c60f2a55",
      "title": "02_13",
      "slug": "02_13",
      "markdown": "##### Did\n- Started going through the MIT CSAIL course on distributed systems\n- ^^^ Uses go so I thought that'd be fun to learn\n- Got environment working\n- Updated my ZSHRC\n- Cleaned the house\n- Chilled\n- Read some crap about GO...looks pretty cool!\n- Got VIM working with GO\n- Started the Go tutorial\n- Remembered how to access the last Vim colon command (there's gotta be a better name for that...) `@:` and then `@@`\n- `Sprintln` !== `Println`",
      "html": "<h5 id=\"did\">Did</h5>\n\n<ul>\n<li>Started going through the MIT CSAIL course on distributed systems</li>\n<li>^^^ Uses go so I thought that'd be fun to learn</li>\n<li>Got environment working</li>\n<li>Updated my ZSHRC</li>\n<li>Cleaned the house</li>\n<li>Chilled</li>\n<li>Read some crap about GO...looks pretty cool!</li>\n<li>Got VIM working with GO</li>\n<li>Started the Go tutorial</li>\n<li>Remembered how to access the last Vim colon command (there's gotta be a better name for that...) <code>@:</code> and then <code>@@</code></li>\n<li><code>Sprintln</code> !== <code>Println</code></li>\n</ul>",
      "image": null,
      "featured": 0,
      "page": 0,
      "status": "published",
      "language": "en_US",
      "meta_title": null,
      "meta_description": null,
      "author_id": 1,
      "created_at": "2016-02-14T00:36:00.000Z",
      "created_by": 1,
      "updated_at": "2016-02-14T15:38:08.000Z",
      "updated_by": 1,
      "published_at": "2016-02-14T00:39:33.000Z",
      "published_by": 1,
      "visibility": "public",
      "mobiledoc": null,
      "amp": null
    },
    {
      "id": 9,
      "uuid": "5f6d9e1b-feb0-4834-8662-b5aac6423a2e",
      "title": "Week 1",
      "slug": "week-1",
      "markdown": "I'm sitting at home with a bit of a cold, trying to think over everything that I did and thought last week - and I'm having trouble. I'm exhausted; exhausted and so happy.\n\nIt's hard for me actually summarize this week because it was such a whirlwind. On the train yesterday I ticked of a list of things I did that could be expanded into a whole blog-post: \n\n- Published three NPM modules\n- Started to understand binary operations and bitshifting for the first time\n- Learned some Regex techniques. \n- Met about 60 new people.\n- Build a whole bunch of log chips.\n- Learned how to randomize the order of an array in Javascript.\n\nI could go on like this for a long time, but it didn't really help me decide what to actually write about. And so I asked my Justine about how to write some sort of summary post. Her suggestion was to try to think of the most significant thing I learned.\n\nLooking over that list above I can't help but marvel at what I can get done with focus, support, and some self belief; its the start of a great journey. And its my journey to make.\n\nAnd __That__ is what last week taught me. \n\nI haven't quite figured out how this is happening, but it's magical. It seems that simply spending time at RC with positive people, with shared focus, who don't engage in any kind of judgement about what we (any of us) can or can't do or understand changes how I think. This environment has helped me realized how often I judge myself about what I _don't_ know and what I _can't_ do. Usually this comes by way of comparison with someone else. But it never helps me move forward.\n\nEveryone here at RC is just doing _their_ thing. \n\nThere's no assumptions about your background or your interests or your path; there's simply support to become a better programmer. And that's powerful. I can see the power of that simple idea as I tick through my `Did` lists. I'm pretty shocked actually, and humbled to be here. I can't wait for the weeks to come.",
      "html": "<p>I'm sitting at home with a bit of a cold, trying to think over everything that I did and thought last week - and I'm having trouble. I'm exhausted; exhausted and so happy.</p>\n\n<p>It's hard for me actually summarize this week because it was such a whirlwind. On the train yesterday I ticked of a list of things I did that could be expanded into a whole blog-post: </p>\n\n<ul>\n<li>Published three NPM modules</li>\n<li>Started to understand binary operations and bitshifting for the first time</li>\n<li>Learned some Regex techniques. </li>\n<li>Met about 60 new people.</li>\n<li>Build a whole bunch of log chips.</li>\n<li>Learned how to randomize the order of an array in Javascript.</li>\n</ul>\n\n<p>I could go on like this for a long time, but it didn't really help me decide what to actually write about. And so I asked my Justine about how to write some sort of summary post. Her suggestion was to try to think of the most significant thing I learned.</p>\n\n<p>Looking over that list above I can't help but marvel at what I can get done with focus, support, and some self belief; its the start of a great journey. And its my journey to make.</p>\n\n<p>And <strong>That</strong> is what last week taught me. </p>\n\n<p>I haven't quite figured out how this is happening, but it's magical. It seems that simply spending time at RC with positive people, with shared focus, who don't engage in any kind of judgement about what we (any of us) can or can't do or understand changes how I think. This environment has helped me realized how often I judge myself about what I <em>don't</em> know and what I <em>can't</em> do. Usually this comes by way of comparison with someone else. But it never helps me move forward.</p>\n\n<p>Everyone here at RC is just doing <em>their</em> thing. </p>\n\n<p>There's no assumptions about your background or your interests or your path; there's simply support to become a better programmer. And that's powerful. I can see the power of that simple idea as I tick through my <code>Did</code> lists. I'm pretty shocked actually, and humbled to be here. I can't wait for the weeks to come.</p>",
      "image": null,
      "featured": 0,
      "page": 0,
      "status": "published",
      "language": "en_US",
      "meta_title": null,
      "meta_description": null,
      "author_id": 1,
      "created_at": "2016-02-14T21:47:05.000Z",
      "created_by": 1,
      "updated_at": "2016-02-15T20:05:22.000Z",
      "updated_by": 1,
      "published_at": "2016-02-15T20:05:22.000Z",
      "published_by": 1,
      "visibility": "public",
      "mobiledoc": null,
      "amp": null
    },
    {
      "id": 10,
      "uuid": "dbafbe8b-5386-4bf3-ace5-bc410ae637eb",
      "title": "02_15",
      "slug": "02_15",
      "markdown": "###### Did\n- Meditated\n- Over the weekend I decided that I should keep writing Ruby since I've already put in the time (and I was struggling with some simple syntax üòï ).\n- So I'll do some stuff in Ruby (algorithms, writing my Nand2Tetris compiler, maybe crypto challenges)\n- I also decided that the MIT distributed systems course is a good excuse to start learning Go.\n- Had our Monday Nand2Tetris meeting\n- Kaley helped me understand why AND is like multiplying and OR is like adding (Those are their logical symbols). IE.\n```hdl\n0 AND 1 = 0\n1 AND 1 = 1\n1 AND 0 = 0\n\n1 OR 0 = 0 \n1 OR 1 = 1 (11 with a carry bit)\n```\n- Build half, full, and 16bit adders, and 16bit incrementer.\n- Had checkin\n- Got Banh Mi with Oguz\n- Met Liz\n- Started reading _MapReduce_ paper\n- Finished working through `Go` Tour module on Flow Control and struggled with using Newton's method for doing square roots where the loop terminates when the delta is small (that's a jumble of words there...)\n- Started working through a Count-Sort algorithm in `Ruby`\n- Some `Ruby` to fill an array with random values: \n```ruby\nmyArr = Array.new(100) { rand(1..17) }\n```\n- Re-Setup my `Ruby` dev environment\n- Went to algorithms lecture on time complexity by David and NP problems by Matthew\n- Dinner\n- Talk @ RC on `Perl 7`",
      "html": "<h6 id=\"did\">Did</h6>\n\n<ul>\n<li>Meditated</li>\n<li>Over the weekend I decided that I should keep writing Ruby since I've already put in the time (and I was struggling with some simple syntax üòï ).</li>\n<li>So I'll do some stuff in Ruby (algorithms, writing my Nand2Tetris compiler, maybe crypto challenges)</li>\n<li>I also decided that the MIT distributed systems course is a good excuse to start learning Go.</li>\n<li>Had our Monday Nand2Tetris meeting</li>\n<li>Kaley helped me understand why AND is like multiplying and OR is like adding (Those are their logical symbols). IE.</li>\n</ul>\n\n<pre><code class=\"language-hdl\">0 AND 1 = 0  \n1 AND 1 = 1  \n1 AND 0 = 0\n\n1 OR 0 = 0  \n1 OR 1 = 1 (11 with a carry bit)  \n</code></pre>\n\n<ul>\n<li>Build half, full, and 16bit adders, and 16bit incrementer.</li>\n<li>Had checkin</li>\n<li>Got Banh Mi with Oguz</li>\n<li>Met Liz</li>\n<li>Started reading <em>MapReduce</em> paper</li>\n<li>Finished working through <code>Go</code> Tour module on Flow Control and struggled with using Newton's method for doing square roots where the loop terminates when the delta is small (that's a jumble of words there...)</li>\n<li>Started working through a Count-Sort algorithm in <code>Ruby</code></li>\n<li>Some <code>Ruby</code> to fill an array with random values: </li>\n</ul>\n\n<pre><code class=\"language-ruby\">myArr = Array.new(100) { rand(1..17) }  \n</code></pre>\n\n<ul>\n<li>Re-Setup my <code>Ruby</code> dev environment</li>\n<li>Went to algorithms lecture on time complexity by David and NP problems by Matthew</li>\n<li>Dinner</li>\n<li>Talk @ RC on <code>Perl 7</code></li>\n</ul>",
      "image": null,
      "featured": 0,
      "page": 0,
      "status": "published",
      "language": "en_US",
      "meta_title": null,
      "meta_description": null,
      "author_id": 1,
      "created_at": "2016-02-15T19:22:58.000Z",
      "created_by": 1,
      "updated_at": "2016-02-17T00:02:26.000Z",
      "updated_by": 1,
      "published_at": "2016-02-16T15:57:14.000Z",
      "published_by": 1,
      "visibility": "public",
      "mobiledoc": null,
      "amp": null
    },
    {
      "id": 11,
      "uuid": "3b4c3ddb-1363-478b-a7c9-5aa0e7ba3297",
      "title": "02_16",
      "slug": "02_16",
      "markdown": "###### Did\n- Meditated\n- Morning checkin\n- Learned about `structs`, `slices`, and `maps` in `Go`\n- Continue to be amazed by `Go` (I've never worked in compiled or typed language)\n- Continue to have my brain broken by `Go` (its really weird to have to declare everything and think through a problem so thoroughly before writing the code)\n- Implemented a simple word counting program in `Go`\n- Had lunch with Ben, Ryan, and Shaun\n- Spent a long time talking with ^^^ about pointers (another new concept for me)\n- Think about how weird pointers are. `Ruby` is pass by value but there are conventions to prevent you from mutating the underlying object (functions that mutate have a `!` in them eg `flatten!`)\n- Except in `Ruby` all vars are pointers/references (I'm still not clear if those are different)\n```ruby\na = *(1..5) \n# This is a _splat_ operator not a pointer\nb = a\na << 6\nputs b \n     => [1, 2, 3, 4, 5, 6]\n``` \n\n- Read through [Bastard book of Ruby on collections](http://ruby.bastardsbook.com/chapters/collections/)\n- Messed around with some array reversing in Ruby. These return a new array and reverse in place, respectively.\n```\na = *(1..10)\n\ndef reverse(arr)\n  temp = []\n  arr.each do |x|\n    temp.unshift(x)\n  end\n  temp\nend\n\ndef clever_reverse!(arr)\n  last_index = arr.length - 1\n  for x in 0..arr.length/2\n    arr[x], arr[last_index - x] = arr[last_index - x], arr[x]\n  end\n  arr\nend\n\ntest = reverse(a)\nputs \"A is #{a}\" \nputs \"test is #{test}\"\ncool_reverse(a)\nputs \"a is now #{a}\"\n      =>\n      A is [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n      test is [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n      a is now [10, 9, 8, 7, 5, 6, 4, 3, 2, 1]\n``` \n- Went to jobs talk\n- Read [this great article](http://www.mikeperham.com/2014/11/26/building-a-binary-tree-with-enumerable/) on binary trees in ruby using the `Ennumerable` module\n",
      "html": "<h6 id=\"did\">Did</h6>\n\n<ul>\n<li>Meditated</li>\n<li>Morning checkin</li>\n<li>Learned about <code>structs</code>, <code>slices</code>, and <code>maps</code> in <code>Go</code></li>\n<li>Continue to be amazed by <code>Go</code> (I've never worked in compiled or typed language)</li>\n<li>Continue to have my brain broken by <code>Go</code> (its really weird to have to declare everything and think through a problem so thoroughly before writing the code)</li>\n<li>Implemented a simple word counting program in <code>Go</code></li>\n<li>Had lunch with Ben, Ryan, and Shaun</li>\n<li>Spent a long time talking with ^^^ about pointers (another new concept for me)</li>\n<li>Think about how weird pointers are. <code>Ruby</code> is pass by value but there are conventions to prevent you from mutating the underlying object (functions that mutate have a <code>!</code> in them eg <code>flatten!</code>)</li>\n<li>Except in <code>Ruby</code> all vars are pointers/references (I'm still not clear if those are different)</li>\n</ul>\n\n<pre><code class=\"language-ruby\">a = *(1..5)  \n# This is a _splat_ operator not a pointer\nb = a  \na &lt;&lt; 6  \nputs b  \n     =&gt; [1, 2, 3, 4, 5, 6]\n</code></pre>\n\n<ul>\n<li>Read through <a href=\"http://ruby.bastardsbook.com/chapters/collections/\">Bastard book of Ruby on collections</a></li>\n<li>Messed around with some array reversing in Ruby. These return a new array and reverse in place, respectively.</li>\n</ul>\n\n<pre><code>a = *(1..10)\n\ndef reverse(arr)  \n  temp = []\n  arr.each do |x|\n    temp.unshift(x)\n  end\n  temp\nend\n\ndef clever_reverse!(arr)  \n  last_index = arr.length - 1\n  for x in 0..arr.length/2\n    arr[x], arr[last_index - x] = arr[last_index - x], arr[x]\n  end\n  arr\nend\n\ntest = reverse(a)  \nputs \"A is #{a}\"  \nputs \"test is #{test}\"  \ncool_reverse(a)  \nputs \"a is now #{a}\"  \n      =&gt;\n      A is [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n      test is [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n      a is now [10, 9, 8, 7, 5, 6, 4, 3, 2, 1]\n</code></pre>\n\n<p>\n- Went to jobs talk\n- Read <a href=\"http://www.mikeperham.com/2014/11/26/building-a-binary-tree-with-enumerable/\">this great article</a> on binary trees in ruby using the <code>Ennumerable</code> module</p>",
      "image": null,
      "featured": 0,
      "page": 0,
      "status": "published",
      "language": "en_US",
      "meta_title": null,
      "meta_description": null,
      "author_id": 1,
      "created_at": "2016-02-16T21:22:08.000Z",
      "created_by": 1,
      "updated_at": "2016-02-17T00:02:17.000Z",
      "updated_by": 1,
      "published_at": "2016-02-17T00:02:17.000Z",
      "published_by": 1,
      "visibility": "public",
      "mobiledoc": null,
      "amp": null
    },
    {
      "id": 12,
      "uuid": "aa27468f-1d28-43ba-b50a-0bb029d39c3e",
      "title": "02_17",
      "slug": "02_17",
      "markdown": "###### Did\n- Meditated\n- Did `fibonacci closure` exercise in Go -> this was interesting, as go has parallel assignment\n```Go\nfirst, second := 0, 1\nfirst, second = second, first + second\n```\n- Read more about `Ruby` and pass-by-reference vs pass-by-value. It turns out `Ruby` is (confusingly) pass-reference-by-value (aka object sharing). This is fucking weird but this quote from a [great blog](http://robertheaton.com/2014/07/22/is-ruby-pass-by-reference-or-pass-by-value/) really helps sort it out:\n> ‚ÄúHamlet was not written by Shakespeare; it was merely written by a man named Shakespeare.‚Äù - PKD, _Valis_\n\n- This basically means that when you call a function, arguments are copies of the reference to the objects. If you do modification of the parameter in the function, you're modifying the underlying object because you have a reference to it (really, a copy of a reference to it). But if you reassign the argument to another object, this won't be reflected outside the scope of the function.\n\n- Methods in `Go` usually have *pointer receivers so you can actually modify the value to which the receiver points, versus modifying the direct value which might be fine for a non-method function\n- Implemented the Hack ALU from Nand2Tetris\n- Met with Nancy to talk about jobs\n- Went to Algorithms study group section by Dror on dynamic programming. This was interersting. It involves solving problems that are generally done recursively with iterative methods.\n- An example of the above would be solving fibonacci by starting with the base cases of 0 & 1 and then building the sequence upwards.\n\n",
      "html": "<h6 id=\"did\">Did</h6>\n\n<ul>\n<li>Meditated</li>\n<li>Did <code>fibonacci closure</code> exercise in Go -> this was interesting, as go has parallel assignment</li>\n</ul>\n\n<pre><code class=\"language-Go\">first, second := 0, 1  \nfirst, second = second, first + second  \n</code></pre>\n\n<ul>\n<li><p>Read more about <code>Ruby</code> and pass-by-reference vs pass-by-value. It turns out <code>Ruby</code> is (confusingly) pass-reference-by-value (aka object sharing). This is fucking weird but this quote from a <a href=\"http://robertheaton.com/2014/07/22/is-ruby-pass-by-reference-or-pass-by-value/\">great blog</a> really helps sort it out:</p>\n\n<blockquote>\n  <p>‚ÄúHamlet was not written by Shakespeare; it was merely written by a man named Shakespeare.‚Äù - PKD, <em>Valis</em></p>\n</blockquote></li>\n<li><p>This basically means that when you call a function, arguments are copies of the reference to the objects. If you do modification of the parameter in the function, you're modifying the underlying object because you have a reference to it (really, a copy of a reference to it). But if you reassign the argument to another object, this won't be reflected outside the scope of the function.</p></li>\n<li><p>Methods in <code>Go</code> usually have *pointer receivers so you can actually modify the value to which the receiver points, versus modifying the direct value which might be fine for a non-method function</p></li>\n<li>Implemented the Hack ALU from Nand2Tetris</li>\n<li>Met with Nancy to talk about jobs</li>\n<li>Went to Algorithms study group section by Dror on dynamic programming. This was interersting. It involves solving problems that are generally done recursively with iterative methods.</li>\n<li>An example of the above would be solving fibonacci by starting with the base cases of 0 &amp; 1 and then building the sequence upwards.</li>\n</ul>",
      "image": null,
      "featured": 0,
      "page": 0,
      "status": "published",
      "language": "en_US",
      "meta_title": null,
      "meta_description": null,
      "author_id": 1,
      "created_at": "2016-02-17T16:43:40.000Z",
      "created_by": 1,
      "updated_at": "2016-02-21T17:40:55.000Z",
      "updated_by": 1,
      "published_at": "2016-02-18T02:20:03.000Z",
      "published_by": 1,
      "visibility": "public",
      "mobiledoc": null,
      "amp": null
    },
    {
      "id": 13,
      "uuid": "29ac0f40-104a-4ac5-9cf8-1a0d5b29da40",
      "title": "Night and Day",
      "slug": "night-and-day",
      "markdown": "Let's open with a cliche: `What a difference a day makes`.\n\nYesterday was Friday. An RC batch runs M-Th for \"normal\" days, reserving Fridays for prepping for interviews and job related stuff.  The point is to bracket that time and that stress so the rest of the week we focus on programming, not job hunting. That's smart. Another example of removing the barriers to improvement.\n\nYesterday we did a practice interview project: spend 3 hours building a link shortener ala `bit.ly`. I had a great time hacking on some `Ruby` and I was able to build a working prototype in the time pretty handily using `Sinatra` and the `stlib`. I was quite surprised, actually, that it all came together pretty smoothly and I had time to build a few iterations, starting with something working, then improving validation of URLs and the structuring of more complicated links, then building in error messages. I even got it deployed [here](mta.lol). Basically I'd say it was a great ego boost and reminded me that I can actually program pretty well.\n\nThen came the rest of the day.\n\nI spent about three hours trying to implement a fairly straightforward algorithm (insert sort). I can't do it. I must be __stupid__, and __lazy__ to boot. I left feeling really down, discouraged, and worried about my future prospects - would I ever be able to successfully pass a whiteboard interview? \n___\nHere's another version of yesterday: \n\nI'm not stupid or lazy; evidence is entirely to the contrary and so that's a just ==useless story== I told myself. I'm a human, not the Cyborg I expect myself to be (Thanks [Kathy Sierra](https://www.youtube.com/watch?v=FKTxC9pl-WM) for making this distinction). The truth is that I'd actually woken up at 7am to go a Gov't office, spent the week getting over a cold, had trouble sleeping pretty much every night, worked very hard at learning a new language over the week, programmed an ALU, and spent that very morning programming something I cared about. Honestly I _killed_ it in the morning (I say so myself, but I'm proud of what I got done). \n\nAnd this morning, Saturday, I got up, looked over the code I'd stuggled with, quickly wrote some binary-tree functions in `Go` and then banged out an insert sort in `Ruby`. The difference was major.\n\n---\n\nSlowly I'm coming to honor my limits and capacities. Slowly I'm learning that effort and persistence are much more important than a given outcome over the long run (ie. can I program this algorithm in the moment, or can I work hard, learn it, and keep learning over my career). And I recognize now that I've been hampered in my life by a [fixed mindset](https://en.wikipedia.org/wiki/Carol_Dweck). Coming to this field without CS schooling, I feel pretty inadequate sometimes. But learning to program ==at all== has started to break me of that mental habit, though it still rears its ugly head.\n\nAt the end of the day I talked to [John](http://workmajj.com/) about my discouragement with the algorithms practice and he had this to say (_paraphrase_): \n> Programmers as community tend to celebrate algorithmic facility, but there are lots of problems in software that have nothing to do with algorithms.\n\nI'm not saying I'm going to ignore that learning; to the contrary, I know that its just matter of putting in the time and I never want to be held back by a weakness in this area. But I do know that programming is a big tent and that I can find my place in it - even if writing a merge-sort doesn't yet come naturally.",
      "html": "<p>Let's open with a cliche: <code>What a difference a day makes</code>.</p>\n\n<p>Yesterday was Friday. An RC batch runs M-Th for \"normal\" days, reserving Fridays for prepping for interviews and job related stuff.  The point is to bracket that time and that stress so the rest of the week we focus on programming, not job hunting. That's smart. Another example of removing the barriers to improvement.</p>\n\n<p>Yesterday we did a practice interview project: spend 3 hours building a link shortener ala <code>bit.ly</code>. I had a great time hacking on some <code>Ruby</code> and I was able to build a working prototype in the time pretty handily using <code>Sinatra</code> and the <code>stlib</code>. I was quite surprised, actually, that it all came together pretty smoothly and I had time to build a few iterations, starting with something working, then improving validation of URLs and the structuring of more complicated links, then building in error messages. I even got it deployed <a href=\"mta.lol\">here</a>. Basically I'd say it was a great ego boost and reminded me that I can actually program pretty well.</p>\n\n<p>Then came the rest of the day.</p>\n\n<p>I spent about three hours trying to implement a fairly straightforward algorithm (insert sort). I can't do it. I must be <strong>stupid</strong>, and <strong>lazy</strong> to boot. I left feeling really down, discouraged, and worried about my future prospects - would I ever be able to successfully pass a whiteboard interview?  </p>\n\n<hr />\n\n<p>Here's another version of yesterday: </p>\n\n<p>I'm not stupid or lazy; evidence is entirely to the contrary and so that's a just <mark>useless story</mark> I told myself. I'm a human, not the Cyborg I expect myself to be (Thanks <a href=\"https://www.youtube.com/watch?v=FKTxC9pl-WM\">Kathy Sierra</a> for making this distinction). The truth is that I'd actually woken up at 7am to go a Gov't office, spent the week getting over a cold, had trouble sleeping pretty much every night, worked very hard at learning a new language over the week, programmed an ALU, and spent that very morning programming something I cared about. Honestly I <em>killed</em> it in the morning (I say so myself, but I'm proud of what I got done). </p>\n\n<p>And this morning, Saturday, I got up, looked over the code I'd stuggled with, quickly wrote some binary-tree functions in <code>Go</code> and then banged out an insert sort in <code>Ruby</code>. The difference was major.</p>\n\n<hr />\n\n<p>Slowly I'm coming to honor my limits and capacities. Slowly I'm learning that effort and persistence are much more important than a given outcome over the long run (ie. can I program this algorithm in the moment, or can I work hard, learn it, and keep learning over my career). And I recognize now that I've been hampered in my life by a <a href=\"https://en.wikipedia.org/wiki/Carol_Dweck\">fixed mindset</a>. Coming to this field without CS schooling, I feel pretty inadequate sometimes. But learning to program <mark>at all</mark> has started to break me of that mental habit, though it still rears its ugly head.</p>\n\n<p>At the end of the day I talked to <a href=\"http://workmajj.com/\">John</a> about my discouragement with the algorithms practice and he had this to say (<em>paraphrase</em>):  </p>\n\n<blockquote>\n  <p>Programmers as community tend to celebrate algorithmic facility, but there are lots of problems in software that have nothing to do with algorithms.</p>\n</blockquote>\n\n<p>I'm not saying I'm going to ignore that learning; to the contrary, I know that its just matter of putting in the time and I never want to be held back by a weakness in this area. But I do know that programming is a big tent and that I can find my place in it - even if writing a merge-sort doesn't yet come naturally.</p>",
      "image": null,
      "featured": 0,
      "page": 0,
      "status": "published",
      "language": "en_US",
      "meta_title": null,
      "meta_description": null,
      "author_id": 1,
      "created_at": "2016-02-20T17:10:15.000Z",
      "created_by": 1,
      "updated_at": "2016-02-20T23:21:03.000Z",
      "updated_by": 1,
      "published_at": "2016-02-20T23:21:03.000Z",
      "published_by": 1,
      "visibility": "public",
      "mobiledoc": null,
      "amp": null
    },
    {
      "id": 14,
      "uuid": "417ba55b-9d1f-4111-b797-3b3c8d196161",
      "title": "Go",
      "slug": "untitled",
      "markdown": "\nI'd been feeling fairly unproductive - that's subjective of course - due to a combination of sickness and learning a new language (`Go`) which has a number of new and exciting features:\n```go\ntype Go struct {\n  *Pointers\n  types\n  interfaces{} \n  concurrency \n  compilation\n}\n``` ",
      "html": "<p>I'd been feeling fairly unproductive - that's subjective of course - due to a combination of sickness and learning a new language (<code>Go</code>) which has a number of new and exciting features:  </p>\n\n<pre><code class=\"language-go\">type Go struct {  \n  *Pointers\n  types\n  interfaces{} \n  concurrency \n  compilation\n}\n</code></pre>",
      "image": null,
      "featured": 0,
      "page": 0,
      "status": "draft",
      "language": "en_US",
      "meta_title": null,
      "meta_description": null,
      "author_id": 1,
      "created_at": "2016-02-20T23:16:56.000Z",
      "created_by": 1,
      "updated_at": "2016-02-20T23:17:08.000Z",
      "updated_by": 1,
      "published_at": null,
      "published_by": null,
      "visibility": "public",
      "mobiledoc": null,
      "amp": null
    },
    {
      "id": 15,
      "uuid": "5779a790-25eb-4602-a5dd-24bdb8ed3a90",
      "title": "02_22",
      "slug": "02_22",
      "markdown": "###### Did \n- This was my first day writing my own `Go` (rather than working through a tutorial). Don't have much to show for the day, but I learned a lot.\n- Worked on part 1 of lab 1 the CSail 6.824 distributed systems course\n - I Wrote the `doMap` function and have most of `doReduce` working \n - WHOAH `Go` has lots of boilerplate. Its super explicit and I like it a lot, but you write a lot of of code to do things that I'm used to writing in a line in eg. `Ruby`.\n - Also error handling is ~weird~ (No `exceptions?` No `Try/Catch`)\n - But I'm getting used to the type stuff and its actually kinda nice have safety and having to think of things ahead of time\n- Had our Nand2Tetris sectional\n- Went for dumplings with Shaun and Karan\n- Had a nice coffee walk with Karan and Ben\n- Walked to ebay for Evan's talk and chatted with Jake about security and crypto stuff\n- Attend Evan's talk on `Elm`\n",
      "html": "<h6 id=\"did\">Did</h6>\n\n<ul>\n<li>This was my first day writing my own <code>Go</code> (rather than working through a tutorial). Don't have much to show for the day, but I learned a lot.</li>\n<li>Worked on part 1 of lab 1 the CSail 6.824 distributed systems course\n<ul><li>I Wrote the <code>doMap</code> function and have most of <code>doReduce</code> working </li>\n<li>WHOAH <code>Go</code> has lots of boilerplate. Its super explicit and I like it a lot, but you write a lot of of code to do things that I'm used to writing in a line in eg. <code>Ruby</code>.</li>\n<li>Also error handling is ~weird~ (No <code>exceptions?</code> No <code>Try/Catch</code>)</li>\n<li>But I'm getting used to the type stuff and its actually kinda nice have safety and having to think of things ahead of time</li></ul></li>\n<li>Had our Nand2Tetris sectional</li>\n<li>Went for dumplings with Shaun and Karan</li>\n<li>Had a nice coffee walk with Karan and Ben</li>\n<li>Walked to ebay for Evan's talk and chatted with Jake about security and crypto stuff</li>\n<li>Attend Evan's talk on <code>Elm</code></li>\n</ul>",
      "image": null,
      "featured": 0,
      "page": 0,
      "status": "published",
      "language": "en_US",
      "meta_title": null,
      "meta_description": null,
      "author_id": 1,
      "created_at": "2016-02-23T02:00:53.000Z",
      "created_by": 1,
      "updated_at": "2016-02-23T02:38:52.000Z",
      "updated_by": 1,
      "published_at": "2016-02-23T02:38:52.000Z",
      "published_by": 1,
      "visibility": "public",
      "mobiledoc": null,
      "amp": null
    },
    {
      "id": 16,
      "uuid": "a758d5ff-bf02-404a-b2ae-c41e10029b99",
      "title": "02_23",
      "slug": "02_23",
      "markdown": "###### Did\n- Ran\n- Meditated\n- Got my `doReduce` to work with help from Oguz\n - It turns out it was marshalling & unmarshalling the JSON in some weird way. Results are [here](https://github.com/Zanadar/6.824-golabs-2016/compare/lab1.1)\n- Talked a lot about ethics at lunch with Mikey &c\n- Read some blog posts about using Anki to help with learning code. I figure :shrug: why not?\n- Set up Anki for SRS. I've tried this before and found Anki's interface weird. This time I got over the hurdle and will stick with it.\n- Wrote out some Anki cards for algorithms, `Ruby`, and `Git`\n- Paricipated in first crit group. I bumbled my way though talking about my `doMap` and `doReduce` code. Not prepared...\n- Looked at: \n![my CPU working hard](http://ghst.s3.amazonaws.com/Screen%20Shot%202016-02-23%20at%205.31.59%20PM.png)\n- Got S3 setup for image hosting on this blog\n\n",
      "html": "<h6 id=\"did\">Did</h6>\n\n<ul>\n<li>Ran</li>\n<li>Meditated</li>\n<li>Got my <code>doReduce</code> to work with help from Oguz\n<ul><li>It turns out it was marshalling &amp; unmarshalling the JSON in some weird way. Results are <a href=\"https://github.com/Zanadar/6.824-golabs-2016/compare/lab1.1\">here</a></li></ul></li>\n<li>Talked a lot about ethics at lunch with Mikey &amp;c</li>\n<li>Read some blog posts about using Anki to help with learning code. I figure :shrug: why not?</li>\n<li>Set up Anki for SRS. I've tried this before and found Anki's interface weird. This time I got over the hurdle and will stick with it.</li>\n<li>Wrote out some Anki cards for algorithms, <code>Ruby</code>, and <code>Git</code></li>\n<li>Paricipated in first crit group. I bumbled my way though talking about my <code>doMap</code> and <code>doReduce</code> code. Not prepared...</li>\n<li>Looked at: \n<img src=\"http://ghst.s3.amazonaws.com/Screen%20Shot%202016-02-23%20at%205.31.59%20PM.png\" alt=\"my CPU working hard\" /></li>\n<li>Got S3 setup for image hosting on this blog</li>\n</ul>",
      "image": null,
      "featured": 0,
      "page": 0,
      "status": "published",
      "language": "en_US",
      "meta_title": null,
      "meta_description": null,
      "author_id": 1,
      "created_at": "2016-02-23T20:03:47.000Z",
      "created_by": 1,
      "updated_at": "2016-02-25T02:37:11.000Z",
      "updated_by": 1,
      "published_at": "2016-02-23T23:19:02.000Z",
      "published_by": 1,
      "visibility": "public",
      "mobiledoc": null,
      "amp": null
    },
    {
      "id": 17,
      "uuid": "941499a2-304a-4bfb-aedd-6016fef9f935",
      "title": "02_24",
      "slug": "02_24",
      "markdown": "###### Did\n- Meditated\n- Wrote `map` and `reduce` functions to count words in a bunch of Project Guttenberg books.\n- Finished the `scheduling` function for the `Go` map/reduce lab with help from Oguz. Here's the code:\n```go\n\tvar done = make(chan bool)\n\n\tfor i := 0; i < ntasks; i++ {\n\t\tgo func(i int) {\n\t\t\tworker := <-mr.registerChannel\n\t\t\targs := DoTaskArgs{mr.jobName, mr.files[i], phase, i, nios}\n\t\t\tok := call(worker, \"Worker.DoTask\", args, new(struct{}))\n\t\t\tfor ok != true {\n\t\t\t\tworker = <-mr.registerChannel\n\t\t\t\tok = call(worker, \"Worker.DoTask\", args, new(struct{}))\n\t\t\t}\n\t\t\tdone <- true\n\t\t\tmr.registerChannel <- worker\n\t\t}(i)\n\t}\n\n\tfor i := 0; i < ntasks; i++ {\n\t\t<-done\n\t}\n\n```\nBasically this a queue of sorts. The scheduler creates a `goroutine` for each task, waits for a worker on the `registerChannel`, and when she gets one, she makes an `RPC` call for that worker to do the task (Map or Reduce). She waits until the RPC call succeeds, queuing more workers if necessary (weak worker failure code checking), and then pops the worker back into the queue and adds a `true` message to the done channel.\n\nBecause these `RPC` calls are are done in differant `goroutines` than the main one, we, finally, have to wait for all of the `done` messages to appear and drain that channel.\n\n- The above took a while to wrap my head around, but in the end I think it all makes pretty good sense. Writing `Go` is turning out to be lots of fun! (and channels make concurrency especially simple(not easy))\n- Went to algorithms talk by Caleb on crypto.\n- Ran through my Anki decks. Seems like it'll be helpful.\n- Tried to explain Map/Reduce to Karan and John. I think I'm starting to understand it myself. Which is good, because I'm gonna present on it tomorrow....\n \n",
      "html": "<h6 id=\"did\">Did</h6>\n\n<ul>\n<li>Meditated</li>\n<li>Wrote <code>map</code> and <code>reduce</code> functions to count words in a bunch of Project Guttenberg books.</li>\n<li>Finished the <code>scheduling</code> function for the <code>Go</code> map/reduce lab with help from Oguz. Here's the code:</li>\n</ul>\n\n<pre><code class=\"language-go\">    var done = make(chan bool)\n\n    for i := 0; i &lt; ntasks; i++ {\n        go func(i int) {\n            worker := &lt;-mr.registerChannel\n            args := DoTaskArgs{mr.jobName, mr.files[i], phase, i, nios}\n            ok := call(worker, \"Worker.DoTask\", args, new(struct{}))\n            for ok != true {\n                worker = &lt;-mr.registerChannel\n                ok = call(worker, \"Worker.DoTask\", args, new(struct{}))\n            }\n            done &lt;- true\n            mr.registerChannel &lt;- worker\n        }(i)\n    }\n\n    for i := 0; i &lt; ntasks; i++ {\n        &lt;-done\n    }\n</code></pre>\n\n<p>Basically this a queue of sorts. The scheduler creates a <code>goroutine</code> for each task, waits for a worker on the <code>registerChannel</code>, and when she gets one, she makes an <code>RPC</code> call for that worker to do the task (Map or Reduce). She waits until the RPC call succeeds, queuing more workers if necessary (weak worker failure code checking), and then pops the worker back into the queue and adds a <code>true</code> message to the done channel.</p>\n\n<p>Because these <code>RPC</code> calls are are done in differant <code>goroutines</code> than the main one, we, finally, have to wait for all of the <code>done</code> messages to appear and drain that channel.</p>\n\n<ul>\n<li>The above took a while to wrap my head around, but in the end I think it all makes pretty good sense. Writing <code>Go</code> is turning out to be lots of fun! (and channels make concurrency especially simple(not easy))</li>\n<li>Went to algorithms talk by Caleb on crypto.</li>\n<li>Ran through my Anki decks. Seems like it'll be helpful.</li>\n<li>Tried to explain Map/Reduce to Karan and John. I think I'm starting to understand it myself. Which is good, because I'm gonna present on it tomorrow....</li>\n</ul>",
      "image": null,
      "featured": 0,
      "page": 0,
      "status": "published",
      "language": "en_US",
      "meta_title": null,
      "meta_description": null,
      "author_id": 1,
      "created_at": "2016-02-25T01:07:58.000Z",
      "created_by": 1,
      "updated_at": "2016-02-25T02:39:21.000Z",
      "updated_by": 1,
      "published_at": "2016-02-25T02:32:18.000Z",
      "published_by": 1,
      "visibility": "public",
      "mobiledoc": null,
      "amp": null
    },
    {
      "id": 18,
      "uuid": "787e953f-8e3d-426a-8408-04b98c059a63",
      "title": "02_25",
      "slug": "02_25",
      "markdown": "###### Did\n- Ran. Weather was ‚òÄÔ∏è great.\n- Meditated\n- Went to Evan's talk about type inference. Interesting but a bit over my head as I'm just starting to get experience in a typed language.\n- Worked on slides for my talk [MapReduce for Farmers](https://docs.google.com/presentation/d/1EK-1Rx7OsPNrNnhbgyE8tDTWUaP2doPA0gTV9AeLz5w/edit?usp=sharing)\n(an idea I had on my run this morning\n- Coded a `bit`, `16bit Register`, `RAM8`, and `RAM64`. These last two were awesome as they're essentially recursively structured registers of registers and registers of RAM8. Another example of amazing complexity out of somewhat simple pieces.\n- Went to crit group and Andrew talked about his JS program for demonstrating Dijkstra's algorithm\n- Prepped for talk\n- Watched awesome presentations\n- Delivered talk (I thought it went pretty well even though I was nervous). This was a big first step. One of my goals at RC is to improve technical writing and presenting skills, so these Thursday nights are awesome for that. I also made a joke about üí©. Now I just gotta write about more technical subjects...\n- Hung out after presentations for pizza and good chats with John and Karan.",
      "html": "<h6 id=\"did\">Did</h6>\n\n<ul>\n<li>Ran. Weather was ‚òÄÔ∏è great.</li>\n<li>Meditated</li>\n<li>Went to Evan's talk about type inference. Interesting but a bit over my head as I'm just starting to get experience in a typed language.</li>\n<li>Worked on slides for my talk <a href=\"https://docs.google.com/presentation/d/1EK-1Rx7OsPNrNnhbgyE8tDTWUaP2doPA0gTV9AeLz5w/edit?usp=sharing\">MapReduce for Farmers</a>\n(an idea I had on my run this morning</li>\n<li>Coded a <code>bit</code>, <code>16bit Register</code>, <code>RAM8</code>, and <code>RAM64</code>. These last two were awesome as they're essentially recursively structured registers of registers and registers of RAM8. Another example of amazing complexity out of somewhat simple pieces.</li>\n<li>Went to crit group and Andrew talked about his JS program for demonstrating Dijkstra's algorithm</li>\n<li>Prepped for talk</li>\n<li>Watched awesome presentations</li>\n<li>Delivered talk (I thought it went pretty well even though I was nervous). This was a big first step. One of my goals at RC is to improve technical writing and presenting skills, so these Thursday nights are awesome for that. I also made a joke about üí©. Now I just gotta write about more technical subjects...</li>\n<li>Hung out after presentations for pizza and good chats with John and Karan.</li>\n</ul>",
      "image": null,
      "featured": 0,
      "page": 0,
      "status": "published",
      "language": "en_US",
      "meta_title": null,
      "meta_description": null,
      "author_id": 1,
      "created_at": "2016-02-26T23:50:04.000Z",
      "created_by": 1,
      "updated_at": "2016-02-27T00:00:08.000Z",
      "updated_by": 1,
      "published_at": "2016-02-26T23:50:00.000Z",
      "published_by": 1,
      "visibility": "public",
      "mobiledoc": null,
      "amp": null
    },
    {
      "id": 19,
      "uuid": "670f878d-4a5f-449e-a0e1-2b38c89a4547",
      "title": "02_26",
      "slug": "02_26",
      "markdown": "###### Did\n- Meditated\n- Worked on recursive algorithms\n- Installed and set up `jruby_processing`\n- Did some basic examples with above\n- Wrote a Sierpinski gasket, which is a nice example of recursion.\n![gasket](http://ghst.s3.amazonaws.com/color_capture.png)\n- Pertinent Code for above:\n```ruby\ndef drawSquare(x, y, side)\n  stroke 4\n  if side <= 10\n    fill(x % 255, y % 255, 255)\n  else\n    no_fill\n  end\n  rect x, y, side, side\n  return unless side > 10\n  drawSquare(x - side /2, y- side/2, side/2)\n  drawSquare(x + side /2, y- side/2, side/2)\n  drawSquare(x - side /2, y+ side/2, side/2)\nend\n```\n\n- Did some work on sorting algorithms, especially merge-sort",
      "html": "<h6 id=\"did\">Did</h6>\n\n<ul>\n<li>Meditated</li>\n<li>Worked on recursive algorithms</li>\n<li>Installed and set up <code>jruby_processing</code></li>\n<li>Did some basic examples with above</li>\n<li>Wrote a Sierpinski gasket, which is a nice example of recursion.\n<img src=\"http://ghst.s3.amazonaws.com/color_capture.png\" alt=\"gasket\" /></li>\n<li>Pertinent Code for above:</li>\n</ul>\n\n<pre><code class=\"language-ruby\">def drawSquare(x, y, side)  \n  stroke 4\n  if side &lt;= 10\n    fill(x % 255, y % 255, 255)\n  else\n    no_fill\n  end\n  rect x, y, side, side\n  return unless side &gt; 10\n  drawSquare(x - side /2, y- side/2, side/2)\n  drawSquare(x + side /2, y- side/2, side/2)\n  drawSquare(x - side /2, y+ side/2, side/2)\nend  \n</code></pre>\n\n<ul>\n<li>Did some work on sorting algorithms, especially merge-sort</li>\n</ul>",
      "image": "http://ghst.s3.amazonaws.com/color_capture.png",
      "featured": 0,
      "page": 0,
      "status": "published",
      "language": "en_US",
      "meta_title": null,
      "meta_description": null,
      "author_id": 1,
      "created_at": "2016-02-27T00:00:14.000Z",
      "created_by": 1,
      "updated_at": "2016-02-29T21:31:14.000Z",
      "updated_by": 1,
      "published_at": "2016-02-27T13:46:16.000Z",
      "published_by": 1,
      "visibility": "public",
      "mobiledoc": null,
      "amp": null
    },
    {
      "id": 20,
      "uuid": "d30f97c9-4c34-4279-bc8d-1a39a5f79888",
      "title": "02_29",
      "slug": "02_29",
      "markdown": "###### Did\n- Meditated\n- Finished reading about [GFS](https://pdos.csail.mit.edu/6.824/papers/gfs.pdf)\n- Started learning `Erlang`. I already love it. Pattern matching is ==amazebazookas==.\n- Read ch2, 3, 4, && 5 of [Learn You Some Erlang](http://learnyousomeerlang.com/)\n- Compared to quicksort in other languages, here's `Erlang`:\n```erlang\nlc_quicksort([]) -> [];\nlc_quicksort([Pivot|Rest]) ->\n  lc_quicksort([Smaller || Smaller <- Rest, Smaller =< Pivot]) % This is list comprehensions\n  ++ [Pivot] ++\n  lc_quicksort([Larger || Larger <- Rest, Larger > Pivot]).\n```\nWhoah. This doesn't necessarily perform awesomely, as you're allocating a bunch of new lists and walking over them a lot, but still...the code is really cool. And quite clear, even after only a day of working on the language. I like this weird language a lot. From here out I'm gonna do ==Erlang Mondays==.\n\n- Went to the Algorithms group talk by David and Shaun on some aspects of graph algorithms. This was really cool. I immediately saw how powerful and useful understanding graphs could be (as the represent relationships between things). They demonstrated some algorithms related to dependency and min spanning trees, used with concrete exampled of both (the order you take classes in and most cheaply routing a network to all cities in a graph).\n- Went to see Tega Brain talk about her work.",
      "html": "<h6 id=\"did\">Did</h6>\n\n<ul>\n<li>Meditated</li>\n<li>Finished reading about <a href=\"https://pdos.csail.mit.edu/6.824/papers/gfs.pdf\">GFS</a></li>\n<li>Started learning <code>Erlang</code>. I already love it. Pattern matching is <mark>amazebazookas</mark>.</li>\n<li>Read ch2, 3, 4, &amp;&amp; 5 of <a href=\"http://learnyousomeerlang.com/\">Learn You Some Erlang</a></li>\n<li>Compared to quicksort in other languages, here's <code>Erlang</code>:</li>\n</ul>\n\n<pre><code class=\"language-erlang\">lc_quicksort([]) -&gt; [];  \nlc_quicksort([Pivot|Rest]) -&gt;  \n  lc_quicksort([Smaller || Smaller &lt;- Rest, Smaller =&lt; Pivot]) % This is list comprehensions\n  ++ [Pivot] ++\n  lc_quicksort([Larger || Larger &lt;- Rest, Larger &gt; Pivot]).\n</code></pre>\n\n<p>Whoah. This doesn't necessarily perform awesomely, as you're allocating a bunch of new lists and walking over them a lot, but still...the code is really cool. And quite clear, even after only a day of working on the language. I like this weird language a lot. From here out I'm gonna do <mark>Erlang Mondays</mark>.</p>\n\n<ul>\n<li>Went to the Algorithms group talk by David and Shaun on some aspects of graph algorithms. This was really cool. I immediately saw how powerful and useful understanding graphs could be (as the represent relationships between things). They demonstrated some algorithms related to dependency and min spanning trees, used with concrete exampled of both (the order you take classes in and most cheaply routing a network to all cities in a graph).</li>\n<li>Went to see Tega Brain talk about her work.</li>\n</ul>",
      "image": null,
      "featured": 0,
      "page": 0,
      "status": "published",
      "language": "en_US",
      "meta_title": null,
      "meta_description": null,
      "author_id": 1,
      "created_at": "2016-02-29T15:58:18.000Z",
      "created_by": 1,
      "updated_at": "2016-03-01T13:20:51.000Z",
      "updated_by": 1,
      "published_at": "2016-03-01T02:51:36.000Z",
      "published_by": 1,
      "visibility": "public",
      "mobiledoc": null,
      "amp": null
    },
    {
      "id": 21,
      "uuid": "7c5b3a48-5304-4bb7-a0b6-ebd7c4e68103",
      "title": "03_01",
      "slug": "03_01",
      "markdown": "_First day of the new month_ üóì\n###### Did:\n- Ran\n- Meditated\n- Read about the [Raft protocol](https://pdos.csail.mit.edu/6.824/papers/raft-extended.pdf). This paper is awesome. I love that understandability was a design goal. That's really inspiring (they also attempt to prove that its actually better on that score).\n- Made Aeropress coffee inverted style ‚òïÔ∏è ‚§µ ala \n- Checkin\n- Watched lecture on Raft\n- Read/Watched Raft explanation\n- Made lots of chicken scratch üêî diagrams and sticky notes of Raft\n![one note](http://ghst.s3.amazonaws.com/raft2.jpg)\n![another note](http://ghst.s3.amazonaws.com/raft1.jpg)\n- Fiddled with vim for a long time and got ctags working thanks to `tagbar`. This makes navigating Go files much much easier.\n- Walked to Houston halal cart for falafel on rice üçö. Very good.\n- Started on raft election code. This involves creating the RequestVote RPC and the appendEntries RPC, and creating all sorts of structs and timers so the servers in the cluster have everything they need for Raft to work (at least that's the theory...)\n- I might do a presentation about voting in Raft, or maybe about timekeeping in distributed systems this Thursday (probably the latter).\n- Had a nice walk with Ben, Jake, Kaley, and Oguz.\n- Nerded out about books with Jake. \n- More work on Raft code.",
      "html": "<p><em>First day of the new month</em> üóì  </p>\n\n<h6 id=\"did\">Did:</h6>\n\n<ul>\n<li>Ran</li>\n<li>Meditated</li>\n<li>Read about the <a href=\"https://pdos.csail.mit.edu/6.824/papers/raft-extended.pdf\">Raft protocol</a>. This paper is awesome. I love that understandability was a design goal. That's really inspiring (they also attempt to prove that its actually better on that score).</li>\n<li>Made Aeropress coffee inverted style ‚òïÔ∏è ‚§µ ala </li>\n<li>Checkin</li>\n<li>Watched lecture on Raft</li>\n<li>Read/Watched Raft explanation</li>\n<li>Made lots of chicken scratch üêî diagrams and sticky notes of Raft\n<img src=\"http://ghst.s3.amazonaws.com/raft2.jpg\" alt=\"one note\" />\n<img src=\"http://ghst.s3.amazonaws.com/raft1.jpg\" alt=\"another note\" /></li>\n<li>Fiddled with vim for a long time and got ctags working thanks to <code>tagbar</code>. This makes navigating Go files much much easier.</li>\n<li>Walked to Houston halal cart for falafel on rice üçö. Very good.</li>\n<li>Started on raft election code. This involves creating the RequestVote RPC and the appendEntries RPC, and creating all sorts of structs and timers so the servers in the cluster have everything they need for Raft to work (at least that's the theory...)</li>\n<li>I might do a presentation about voting in Raft, or maybe about timekeeping in distributed systems this Thursday (probably the latter).</li>\n<li>Had a nice walk with Ben, Jake, Kaley, and Oguz.</li>\n<li>Nerded out about books with Jake. </li>\n<li>More work on Raft code.</li>\n</ul>",
      "image": null,
      "featured": 0,
      "page": 0,
      "status": "published",
      "language": "en_US",
      "meta_title": null,
      "meta_description": null,
      "author_id": 1,
      "created_at": "2016-03-01T13:21:02.000Z",
      "created_by": 1,
      "updated_at": "2016-03-02T00:22:05.000Z",
      "updated_by": 1,
      "published_at": "2016-03-02T00:22:05.000Z",
      "published_by": 1,
      "visibility": "public",
      "mobiledoc": null,
      "amp": null
    },
    {
      "id": 22,
      "uuid": "eef9ba73-4241-4adf-b52e-851602a5a859",
      "title": "03_02",
      "slug": "03_02",
      "markdown": "###### Did:\n- Meditated\n- Worked on Raft leader voting and heartbeats in Go. That's it pretty much. I'm kinda stuck b/c server's are calling elections even though they're also receiving heartbeats which should be resetting their electionTimers. Confuse. ü§î\n- Did group sectional for Nand2Tetris",
      "html": "<h6 id=\"did\">Did:</h6>\n\n<ul>\n<li>Meditated</li>\n<li>Worked on Raft leader voting and heartbeats in Go. That's it pretty much. I'm kinda stuck b/c server's are calling elections even though they're also receiving heartbeats which should be resetting their electionTimers. Confuse. ü§î</li>\n<li>Did group sectional for Nand2Tetris</li>\n</ul>",
      "image": null,
      "featured": 0,
      "page": 0,
      "status": "published",
      "language": "en_US",
      "meta_title": null,
      "meta_description": null,
      "author_id": 1,
      "created_at": "2016-03-03T00:20:13.000Z",
      "created_by": 1,
      "updated_at": "2016-03-03T01:06:22.000Z",
      "updated_by": 1,
      "published_at": "2016-03-03T01:06:22.000Z",
      "published_by": 1,
      "visibility": "public",
      "mobiledoc": null,
      "amp": null
    },
    {
      "id": 23,
      "uuid": "c04ad35f-53a1-4486-a3c1-4d59a62657ba",
      "title": "03__03",
      "slug": "03__03",
      "markdown": "###### Did:\n- Ran\n- Meditated\n- Checkin\n- Worked on Raft in Go\n- Learned the joy of (ab)using emojis in my debugging print statements\n- Got some recommendations about podcasting from Pam Selle and others. I've been thinking of putting my audio knowledge to use on making a podcast about distributed systems. I'm one of those people that learns by talking (this drives Justine crazy b/c I have to talk through everything) so I figure it'd be a great way to learn about the subject and to get to know people in that community.\n- Had a falafel with John\n- More work on Raft\n- Chatted with Mateusz about his app and learned about Google Data store\n- Went to presentations\n- __FINALLLLY__ üéâüéâüéâüéâüéâüéâüéâüéâüéâ Got the first two tests to pass -> This means the servers will hold an initial election and then hold more if the leader times out. Here's a PR for the code so far\n",
      "html": "<h6 id=\"did\">Did:</h6>\n\n<ul>\n<li>Ran</li>\n<li>Meditated</li>\n<li>Checkin</li>\n<li>Worked on Raft in Go</li>\n<li>Learned the joy of (ab)using emojis in my debugging print statements</li>\n<li>Got some recommendations about podcasting from Pam Selle and others. I've been thinking of putting my audio knowledge to use on making a podcast about distributed systems. I'm one of those people that learns by talking (this drives Justine crazy b/c I have to talk through everything) so I figure it'd be a great way to learn about the subject and to get to know people in that community.</li>\n<li>Had a falafel with John</li>\n<li>More work on Raft</li>\n<li>Chatted with Mateusz about his app and learned about Google Data store</li>\n<li>Went to presentations</li>\n<li><strong>FINALLLLY</strong> üéâüéâüéâüéâüéâüéâüéâüéâüéâ Got the first two tests to pass -> This means the servers will hold an initial election and then hold more if the leader times out. Here's a PR for the code so far</li>\n</ul>",
      "image": null,
      "featured": 0,
      "page": 0,
      "status": "published",
      "language": "en_US",
      "meta_title": null,
      "meta_description": null,
      "author_id": 1,
      "created_at": "2016-03-04T02:48:45.000Z",
      "created_by": 1,
      "updated_at": "2016-03-04T02:55:52.000Z",
      "updated_by": 1,
      "published_at": "2016-03-04T02:55:52.000Z",
      "published_by": 1,
      "visibility": "public",
      "mobiledoc": null,
      "amp": null
    },
    {
      "id": 24,
      "uuid": "8a6875a2-5f66-4530-a125-8b18755ca1e4",
      "title": "03_07",
      "slug": "03_07",
      "markdown": "###### Did:\n- Went for an awesome hike with a crew of RC people on Sunday. Today: Sore and slow.\n- Read through Ch.4 of nand2tetris.\n- Finished writing a hack assembly program to multiply two number\n- Started a program an IO program in above\n- Began drafting thursday presentation\n- Read 'Coders at Work' chapter w/ Joe Armstrong\n- Watched a couple Go videos\n- Started debugging race conditions in my Raft implementation",
      "html": "<h6 id=\"did\">Did:</h6>\n\n<ul>\n<li>Went for an awesome hike with a crew of RC people on Sunday. Today: Sore and slow.</li>\n<li>Read through Ch.4 of nand2tetris.</li>\n<li>Finished writing a hack assembly program to multiply two number</li>\n<li>Started a program an IO program in above</li>\n<li>Began drafting thursday presentation</li>\n<li>Read 'Coders at Work' chapter w/ Joe Armstrong</li>\n<li>Watched a couple Go videos</li>\n<li>Started debugging race conditions in my Raft implementation</li>\n</ul>",
      "image": null,
      "featured": 0,
      "page": 0,
      "status": "published",
      "language": "en_US",
      "meta_title": null,
      "meta_description": null,
      "author_id": 1,
      "created_at": "2016-03-08T13:25:06.000Z",
      "created_by": 1,
      "updated_at": "2016-03-08T13:28:47.000Z",
      "updated_by": 1,
      "published_at": "2016-03-08T13:28:47.000Z",
      "published_by": 1,
      "visibility": "public",
      "mobiledoc": null,
      "amp": null
    },
    {
      "id": 25,
      "uuid": "e142234b-ee43-493c-a8c4-5bde0ff31f41",
      "title": "03_08",
      "slug": "03_09",
      "markdown": "###### Did:\n- Ran\n- First silent meditation (I've been doing guided for about a month). 5 mins as a start. Flew by.\n- Checkin \n- Spent the morning working on IO for hack assembly.\n- I'm getting to like working with assembly a lot. Its really hard and granular, but there's something super cool about working with the computer that deeply.\n- Went through the intro for MicroCorruption, which is a matasano assembly hacking game.\n- Talked to one of the new RC facilitators, James, when I was having a problem with above. This was super helpful and fun. Explaining it to him gave me a better understanding of what was going on and eventually helped me get the code working.\n- Got falafel w. Karan \n- At w. K and james. We talked about science infrastructure, job stuff, and Georgia Tech\n- Spent the afternoon working on Raft. I've done a lot of refactoring in order to make the code more understandable.\nThis included moving the `handleVoting` code into its own method and using `time.Ticker` instead of countdowns that I was resetting all the time. I also managed to fix a bunch of race conditions, which should make things saner....but I broke the second test. Will get that working again tomorrow.\n",
      "html": "<h6 id=\"did\">Did:</h6>\n\n<ul>\n<li>Ran</li>\n<li>First silent meditation (I've been doing guided for about a month). 5 mins as a start. Flew by.</li>\n<li>Checkin </li>\n<li>Spent the morning working on IO for hack assembly.</li>\n<li>I'm getting to like working with assembly a lot. Its really hard and granular, but there's something super cool about working with the computer that deeply.</li>\n<li>Went through the intro for MicroCorruption, which is a matasano assembly hacking game.</li>\n<li>Talked to one of the new RC facilitators, James, when I was having a problem with above. This was super helpful and fun. Explaining it to him gave me a better understanding of what was going on and eventually helped me get the code working.</li>\n<li>Got falafel w. Karan </li>\n<li>At w. K and james. We talked about science infrastructure, job stuff, and Georgia Tech</li>\n<li>Spent the afternoon working on Raft. I've done a lot of refactoring in order to make the code more understandable.\nThis included moving the <code>handleVoting</code> code into its own method and using <code>time.Ticker</code> instead of countdowns that I was resetting all the time. I also managed to fix a bunch of race conditions, which should make things saner....but I broke the second test. Will get that working again tomorrow.</li>\n</ul>",
      "image": null,
      "featured": 0,
      "page": 0,
      "status": "published",
      "language": "en_US",
      "meta_title": null,
      "meta_description": null,
      "author_id": 1,
      "created_at": "2016-03-09T13:16:39.000Z",
      "created_by": 1,
      "updated_at": "2016-03-10T13:28:37.000Z",
      "updated_by": 1,
      "published_at": "2016-03-09T15:24:55.000Z",
      "published_by": 1,
      "visibility": "public",
      "mobiledoc": null,
      "amp": null
    },
    {
      "id": 26,
      "uuid": "734ca21c-5d1d-4426-9bc5-0673f94f1e32",
      "title": "03_09",
      "slug": "03_09-2",
      "markdown": "üéâ‚òÄÔ∏è Beautiful day.\n###### Did:\n- Meditated\n- Worked on Raft. ugh. I'm really stuck. I refactored the code so that all the loops have their own timers and dft `goroutines` aren't sharing and modifying the same clocks. This should be better, but I haven't gotten it to work.\n- Started to plan for the DHT and bittorrent clients.\n- Nand2 sectional. We talked about the potential hidden instructions in the ALU. Very interesting.",
      "html": "<p>üéâ‚òÄÔ∏è Beautiful day.</p>\n\n<h6 id=\"did\">Did:</h6>\n\n<ul>\n<li>Meditated</li>\n<li>Worked on Raft. ugh. I'm really stuck. I refactored the code so that all the loops have their own timers and dft <code>goroutines</code> aren't sharing and modifying the same clocks. This should be better, but I haven't gotten it to work.</li>\n<li>Started to plan for the DHT and bittorrent clients.</li>\n<li>Nand2 sectional. We talked about the potential hidden instructions in the ALU. Very interesting.</li>\n</ul>",
      "image": null,
      "featured": 0,
      "page": 0,
      "status": "published",
      "language": "en_US",
      "meta_title": null,
      "meta_description": null,
      "author_id": 1,
      "created_at": "2016-03-10T13:13:53.000Z",
      "created_by": 1,
      "updated_at": "2016-03-10T13:28:52.000Z",
      "updated_by": 1,
      "published_at": "2016-03-10T13:17:51.000Z",
      "published_by": 1,
      "visibility": "public",
      "mobiledoc": null,
      "amp": null
    },
    {
      "id": 27,
      "uuid": "fc79f68c-31b1-4557-aebc-478419bc6812",
      "title": "03_10",
      "slug": "03_10",
      "markdown": "###### Did:\n- Ran\n- Meditated\n- Checkins\n- Worked on a little bit of my Raft implemetation. I'm gonna shelve it for a while. I feel like I learned a ton, but don't have too much to show for it...but I'm trying to be okay with that.\n- Started reading the paper about the Kademlia DHT.\n- Played with hashing & XORing in `Go`. I made a little go playground here: https://play.golang.org/p/F8CtJsvHs_\n- Practiced binary operations and counting by hand\n- Wrote some simple programs to create Sha1 hashes and XOR them against each other. Kademlia uses this for distance.\n- Presentations",
      "html": "<h6 id=\"did\">Did:</h6>\n\n<ul>\n<li>Ran</li>\n<li>Meditated</li>\n<li>Checkins</li>\n<li>Worked on a little bit of my Raft implemetation. I'm gonna shelve it for a while. I feel like I learned a ton, but don't have too much to show for it...but I'm trying to be okay with that.</li>\n<li>Started reading the paper about the Kademlia DHT.</li>\n<li>Played with hashing &amp; XORing in <code>Go</code>. I made a little go playground here: <a href=\"https://play.golang.org/p/F8CtJsvHs_\">https://play.golang.org/p/F8CtJsvHs_</a></li>\n<li>Practiced binary operations and counting by hand</li>\n<li>Wrote some simple programs to create Sha1 hashes and XOR them against each other. Kademlia uses this for distance.</li>\n<li>Presentations</li>\n</ul>",
      "image": null,
      "featured": 0,
      "page": 0,
      "status": "published",
      "language": "en_US",
      "meta_title": null,
      "meta_description": null,
      "author_id": 1,
      "created_at": "2016-03-10T13:27:44.000Z",
      "created_by": 1,
      "updated_at": "2016-03-11T16:16:26.000Z",
      "updated_by": 1,
      "published_at": "2016-03-11T16:16:26.000Z",
      "published_by": 1,
      "visibility": "public",
      "mobiledoc": null,
      "amp": null
    },
    {
      "id": 28,
      "uuid": "44f1d90e-c42c-4c75-bef8-e80cd881df05",
      "title": "XOR for distance",
      "slug": "xor-for-distance",
      "markdown": "I've been reading about the Kademlia DHT. Its a...DHT...that uses XOR to decide on node distance.\nTo play with it a little bit I got some code going.\nhttps://play.golang.org/p/F8CtJsvHs_",
      "html": "<p>I've been reading about the Kademlia DHT. Its a...DHT...that uses XOR to decide on node distance. <br />\nTo play with it a little bit I got some code going. <br />\n<a href=\"https://play.golang.org/p/F8CtJsvHs_\">https://play.golang.org/p/F8CtJsvHs_</a></p>",
      "image": null,
      "featured": 0,
      "page": 0,
      "status": "draft",
      "language": "en_US",
      "meta_title": null,
      "meta_description": null,
      "author_id": 1,
      "created_at": "2016-03-10T21:13:16.000Z",
      "created_by": 1,
      "updated_at": "2016-03-10T21:14:17.000Z",
      "updated_by": 1,
      "published_at": null,
      "published_by": null,
      "visibility": "public",
      "mobiledoc": null,
      "amp": null
    },
    {
      "id": 29,
      "uuid": "0890fcf8-eef2-4765-9f24-7ec17fe00c78",
      "title": "03_14",
      "slug": "03_15",
      "markdown": "###### Did:\n- Meditated\n- Went back to my Raft implementation. I blame Oguz for convincing me to restart it. That was a day of frustation.üò§\n- Read Ch 1, 2 of 'Mathematics for the General Reader'\n- Did some online research on distributed systems related jobs. I looked at places like Hashicorp, CoreOS, Docker, CochroachDB, Mesos, CloudFoundry, Heroku, Digital Ocean, & Rackspace. I'm probably a couple years out from being able to get one of these, but its a goal...",
      "html": "<h6 id=\"did\">Did:</h6>\n\n<ul>\n<li>Meditated</li>\n<li>Went back to my Raft implementation. I blame Oguz for convincing me to restart it. That was a day of frustation.üò§</li>\n<li>Read Ch 1, 2 of 'Mathematics for the General Reader'</li>\n<li>Did some online research on distributed systems related jobs. I looked at places like Hashicorp, CoreOS, Docker, CochroachDB, Mesos, CloudFoundry, Heroku, Digital Ocean, &amp; Rackspace. I'm probably a couple years out from being able to get one of these, but its a goal...</li>\n</ul>",
      "image": null,
      "featured": 0,
      "page": 0,
      "status": "published",
      "language": "en_US",
      "meta_title": null,
      "meta_description": null,
      "author_id": 1,
      "created_at": "2016-03-15T16:20:05.000Z",
      "created_by": 1,
      "updated_at": "2016-03-15T21:27:28.000Z",
      "updated_by": 1,
      "published_at": "2016-03-15T16:33:03.000Z",
      "published_by": 1,
      "visibility": "public",
      "mobiledoc": null,
      "amp": null
    },
    {
      "id": 30,
      "uuid": "1e491356-4d97-434d-9445-24b8a9c17e41",
      "title": "03_15",
      "slug": "03_15-2",
      "markdown": "###### Did:\n- Ran\n- Meditated\n- Restarted my Raft code ie I üî•ed my code from the last 7 days because it was üí©üçù (crap spaghetti). \n- So far this^^ has been a really good decision. Things are going much more smoothly and the code is actually understandable. \n- I'm leaving off today mid-work. Currently attempting to implement a stateful `goroutine` that I can send a `VoteRequestReply` to, that will then send back an election result on a channel I provide it (the idea being to select against that channel and the timers). I'm not sure this is the the right way to handle elections, but for now the basic skeleton code of the loops and the timers is working. This [post](https://gobyexample.com/stateful-goroutines) may be useful....\n- Read a [good blogpost](http://the-paper-trail.org/blog/distributed-systems-theory-for-the-distributed-systems-engineer/) on distributed systems theory for engineers. This post lead me to a couple others that I browsed.\n- Talked about GSOC with Karan and Oguz.\n- Started drafting my Thursday talk",
      "html": "<h6 id=\"did\">Did:</h6>\n\n<ul>\n<li>Ran</li>\n<li>Meditated</li>\n<li>Restarted my Raft code ie I üî•ed my code from the last 7 days because it was üí©üçù (crap spaghetti). </li>\n<li>So far this^^ has been a really good decision. Things are going much more smoothly and the code is actually understandable. </li>\n<li>I'm leaving off today mid-work. Currently attempting to implement a stateful <code>goroutine</code> that I can send a <code>VoteRequestReply</code> to, that will then send back an election result on a channel I provide it (the idea being to select against that channel and the timers). I'm not sure this is the the right way to handle elections, but for now the basic skeleton code of the loops and the timers is working. This <a href=\"https://gobyexample.com/stateful-goroutines\">post</a> may be useful....</li>\n<li>Read a <a href=\"http://the-paper-trail.org/blog/distributed-systems-theory-for-the-distributed-systems-engineer/\">good blogpost</a> on distributed systems theory for engineers. This post lead me to a couple others that I browsed.</li>\n<li>Talked about GSOC with Karan and Oguz.</li>\n<li>Started drafting my Thursday talk</li>\n</ul>",
      "image": null,
      "featured": 0,
      "page": 0,
      "status": "published",
      "language": "en_US",
      "meta_title": null,
      "meta_description": null,
      "author_id": 1,
      "created_at": "2016-03-15T21:25:43.000Z",
      "created_by": 1,
      "updated_at": "2016-03-15T21:41:21.000Z",
      "updated_by": 1,
      "published_at": "2016-03-15T21:41:21.000Z",
      "published_by": 1,
      "visibility": "public",
      "mobiledoc": null,
      "amp": null
    },
    {
      "id": 31,
      "uuid": "1819d32f-4f45-4120-acfe-6cce7037d2dd",
      "title": "Limits",
      "slug": "limits",
      "markdown": "I'm afraid to publish this post, but naming things can often kill their power over you, as Ged learned of his shadow. And so it is with some trepidation that I bring you the following story:\n\nOne of my goals at RC was to blog every day I was there. I kept this going for a good while, but I recently fell down. For the last two weeks it's been radio silence. I have my limits, and though they aren't fixed, I struggle to accept that they're there at all. I thought I was getting better, I though I was getting stronger. And I hit a wall two weeks ago that I've been struggling to cross. Blogging stopped, I was too tired to go running or meditate, and I've had trouble programming. I've felt defeated. My depression does that; it saps me spiritually and physically.\n\nI was barely there for my early twenties. I've struggled with depression most of my life. And it had me fully in its grip for about 5 years. I functioned, I held jobs, had friends, I muddled on. But I was a husk. I was looking at the world through a grimey pain of glass. It pretty much sucked. \n\nI'm getting better now. For the past few years I've been working my way out of that grip. Therapy has been incredibly important in this fight, as has learning to accept my own limits and be kind to myself. The connection between all these things isn't necessarily obvious, so I'll elaborate a bit. Basically my depression brain sounds like this:\n>\"Hmmm...you're not really meeting your goals here...maybe you should just give up? You'll never get there in any case. \n\nAt RC, I've been pushing myself. Its such an inspiring environment. I'm been surrounded by some of the smartest and kindest and most curious people I've ever encountered. And the standards of the community have really encouraged me to bring up my game. \n\nBut I also get sad (when the Winter 2's leave ) üò¢. I also get tired and overwhelmed and sick. I also suffer from a sense that I'll never know what I need to know, that I'll never be a good programmer. And programming is goddamn hard and frustrating. When depression rears its head and piles on with that quiet voice - _\"Maybe you're having trouble because you're not smart enough to hack it. Why bother?\"_ - things become a really ugly mess.\n\n---\nThat's what's been going on over the past couple weeks. Spending time with friends, sleeping more, and breathing fresh air have helped me a lot. I'm starting to feel better. The good news is that therapy has taught me to identify twinges of depression sooner and to accept them without giving them too much significance. My depression may never really go away, but I also know now that I can and will feel better even when it pulls me down for a bit. \n\n Thanks for reading.",
      "html": "<p>I'm afraid to publish this post, but naming things can often kill their power over you, as Ged learned of his shadow. And so it is with some trepidation that I bring you the following story:</p>\n\n<p>One of my goals at RC was to blog every day I was there. I kept this going for a good while, but I recently fell down. For the last two weeks it's been radio silence. I have my limits, and though they aren't fixed, I struggle to accept that they're there at all. I thought I was getting better, I though I was getting stronger. And I hit a wall two weeks ago that I've been struggling to cross. Blogging stopped, I was too tired to go running or meditate, and I've had trouble programming. I've felt defeated. My depression does that; it saps me spiritually and physically.</p>\n\n<p>I was barely there for my early twenties. I've struggled with depression most of my life. And it had me fully in its grip for about 5 years. I functioned, I held jobs, had friends, I muddled on. But I was a husk. I was looking at the world through a grimey pain of glass. It pretty much sucked. </p>\n\n<p>I'm getting better now. For the past few years I've been working my way out of that grip. Therapy has been incredibly important in this fight, as has learning to accept my own limits and be kind to myself. The connection between all these things isn't necessarily obvious, so I'll elaborate a bit. Basically my depression brain sounds like this:  </p>\n\n<blockquote>\n  <p>\"Hmmm...you're not really meeting your goals here...maybe you should just give up? You'll never get there in any case. </p>\n</blockquote>\n\n<p>At RC, I've been pushing myself. Its such an inspiring environment. I'm been surrounded by some of the smartest and kindest and most curious people I've ever encountered. And the standards of the community have really encouraged me to bring up my game. </p>\n\n<p>But I also get sad (when the Winter 2's leave ) üò¢. I also get tired and overwhelmed and sick. I also suffer from a sense that I'll never know what I need to know, that I'll never be a good programmer. And programming is goddamn hard and frustrating. When depression rears its head and piles on with that quiet voice - <em>\"Maybe you're having trouble because you're not smart enough to hack it. Why bother?\"</em> - things become a really ugly mess.</p>\n\n<hr />\n\n<p>That's what's been going on over the past couple weeks. Spending time with friends, sleeping more, and breathing fresh air have helped me a lot. I'm starting to feel better. The good news is that therapy has taught me to identify twinges of depression sooner and to accept them without giving them too much significance. My depression may never really go away, but I also know now that I can and will feel better even when it pulls me down for a bit. </p>\n\n<p>Thanks for reading.</p>",
      "image": null,
      "featured": 0,
      "page": 0,
      "status": "published",
      "language": "en_US",
      "meta_title": null,
      "meta_description": null,
      "author_id": 1,
      "created_at": "2016-04-02T16:21:21.000Z",
      "created_by": 1,
      "updated_at": "2016-04-02T17:52:59.000Z",
      "updated_by": 1,
      "published_at": "2016-04-02T17:52:59.000Z",
      "published_by": 1,
      "visibility": "public",
      "mobiledoc": null,
      "amp": null
    },
    {
      "id": 32,
      "uuid": "ef3481a4-e88b-43bf-a0be-8e389f954ed8",
      "title": "ElixiRas",
      "slug": "elixiras",
      "markdown": "I recently watch [this great talk](https://www.youtube.com/watch?v=kpzQrFC55q4) about embedded Elixir and got super excited about the [Nerves Project](http://nerves-project.org/) which is a suite of tools for same.\nI did some hacking earlier this week using Nerves and Bake on my main machine to get things running. And I got `blinky`, the \"Hello World\" of embedded, to build and run using Bake. ==Mind Blown!!==\n\nI decided that I wanted to actually use Raspbian for my prototyping, on advice from folks in the #nerves room on [Elixir-Lang Slack](https://elixir-lang.slack.com). Getting `Erlang` and `Elixir` built on the PI has been quite a challenge, with many false starts and frustrations. But thanks, again, to folks on Slack, I got it done. I decided to record the process for posterity, so the following is a tutorial of all the relevant steps.\n\n---\n*Note: The intention here is to produce an img specifically for doing embedded elixir programming on the pi that you can break out any time you want.*\n\n1. Start with a fresh Raspbian install and get internet and others basics like SSH, vim, etc. configured.\n2. Follow steps here: http://elinux.org/Erlang\n  Building from source seems to be the most reliable way to get a good install. However, it's __mad slow__ so be warned.\n3. Install a precompiled Elixir. I used these [instructions](https://github.com/mmmries/pi-alarm-clock#install-precompiled-elixir).\n4. After you've verified that everything is working (my acid test was doing a `mix compile` for `elixir_ale`) __back up__ your SD card using `dd if=/dev/rdiskx of=/path/to/image bs=1m`. You'll thank yourself later.\n\n_And that's it!_ From there you have a working RasPI image you can use for all your elixir embedded development. Enjoy and get in contact if you have any questions.\n\n",
      "html": "<p>I recently watch <a href=\"https://www.youtube.com/watch?v=kpzQrFC55q4\">this great talk</a> about embedded Elixir and got super excited about the <a href=\"http://nerves-project.org/\">Nerves Project</a> which is a suite of tools for same. <br />\nI did some hacking earlier this week using Nerves and Bake on my main machine to get things running. And I got <code>blinky</code>, the \"Hello World\" of embedded, to build and run using Bake. <mark>Mind Blown!!</mark></p>\n\n<p>I decided that I wanted to actually use Raspbian for my prototyping, on advice from folks in the #nerves room on <a href=\"https://elixir-lang.slack.com\">Elixir-Lang Slack</a>. Getting <code>Erlang</code> and <code>Elixir</code> built on the PI has been quite a challenge, with many false starts and frustrations. But thanks, again, to folks on Slack, I got it done. I decided to record the process for posterity, so the following is a tutorial of all the relevant steps.</p>\n\n<hr />\n\n<p><em>Note: The intention here is to produce an img specifically for doing embedded elixir programming on the pi that you can break out any time you want.</em></p>\n\n<ol>\n<li>Start with a fresh Raspbian install and get internet and others basics like SSH, vim, etc. configured.  </li>\n<li>Follow steps here: <a href=\"http://elinux.org/Erlang\">http://elinux.org/Erlang</a> <br />\nBuilding from source seems to be the most reliable way to get a good install. However, it's <strong>mad slow</strong> so be warned.</li>\n<li>Install a precompiled Elixir. I used these <a href=\"https://github.com/mmmries/pi-alarm-clock#install-precompiled-elixir\">instructions</a>.  </li>\n<li>After you've verified that everything is working (my acid test was doing a <code>mix compile</code> for <code>elixir_ale</code>) <strong>back up</strong> your SD card using <code>dd if=/dev/rdiskx of=/path/to/image bs=1m</code>. You'll thank yourself later.</li>\n</ol>\n\n<p><em>And that's it!</em> From there you have a working RasPI image you can use for all your elixir embedded development. Enjoy and get in contact if you have any questions.</p>",
      "image": null,
      "featured": 0,
      "page": 0,
      "status": "published",
      "language": "en_US",
      "meta_title": null,
      "meta_description": null,
      "author_id": 1,
      "created_at": "2016-04-14T19:11:21.000Z",
      "created_by": 1,
      "updated_at": "2016-04-14T20:54:51.000Z",
      "updated_by": 1,
      "published_at": "2016-04-14T20:54:51.000Z",
      "published_by": 1,
      "visibility": "public",
      "mobiledoc": null,
      "amp": null
    },
    {
      "id": 33,
      "uuid": "e6a662d8-b3ba-4096-9c64-54ba4c6ae743",
      "title": "Bootstrap + React = React-Bootstrap",
      "slug": "bootstrap-react-react-bootstrap",
      "markdown": "Say you're building an app, and you want to put it in front of people. And you don't want it to look shitty. Bootstrap has long been a go to library for this. It does what it says on the tin: it lets you bootstrap your UI and move forward with building the core functionality of your app.\n\nAs an example, say you have a dropdown menu that calls some JavaScript code on a model object. With regular bootstrap, you have the functionality in two places: a set of HTML/CSS that implements the markup for the components and a set of javscript that implements the functionality. This creates a confusing situation (although that's kind of where the web is at these days).\n\n```\n<div class=\"dropdown\">\n  <button class=\"btn btn-default dropdown-toggle\" type=\"button\" id=\"dropdownMenu1\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"true\">\n    Dropdown\n    <span class=\"caret\"></span>\n  </button>\n  <ul class=\"dropdown-menu\" aria-labelledby=\"dropdownMenu1\">\n    <li><a href=\"#\" id=\"action1\">One</a></li>\n    <li><a href=\"#\" id='action2'>Two</a></li>\n    <li><a href=\"#\" id='action3'>Three</a></li>\n    <li role=\"separator\" class=\"divider\"></li>\n    <li><a href=\"#\">Separated link</a></li>\n  </ul>\n</div>\n\n```\n```\nvar model = {\n  'one': function(){ alert('one')},\n  'two': function(){ alert('two')},\n  'three': function(){ alert('three')}\n}\n\n$('.dropdown-toggle').dropdown()\n$('#action1').on('click', alerts.one)\n$('#action2').on('click', alerts.two)\n$('#action3').on('click', alerts.three)\n```\n\nEnter React. React is Facebook's library for building UI. It's designed around a component based architecture, where functionality and structure are implemented in tandem, in one place. And with this philosophy applied to bootstrap, you get nice clean code that truly gets at the idea of components. The above tab example becomes pretty clean:\n```\nfunction alertSelect(key) {\n  alerts[key]()\n}\n\nvar model = {\n  'one': function(){ alert('one')},\n  'two': function(){ alert('two')},\n  'three': function(){ alert('three')}\n}\n\nconst ToolBar = (\n    <Dropdown id=\"dropdown-custom-1\" open={true}>\n      <Dropdown.Menu>\n        <MenuItem eventKey=\"one\" onSelect={alertSelect}>One</MenuItem>\n        <MenuItem eventKey=\"two\" onSelect={alertSelect}>Two action</MenuItem>\n        <MenuItem eventKey=\"three\" onSelect={alertSelect}>Three</MenuItem>\n        <MenuItem divider />\n        <MenuItem eventKey=\"4\">Separated link</MenuItem>\n      </Dropdown.Menu>\n    </Dropdown>\n)\n\nReactDOM.render(Toolbar, mountNode);\n```\nAs you can see, we're using JSX syntax to simply instantiate these components (provided by the `React-Bootstrap` library and render them into our page. And things are much cleaner and self-contained.\n\nAs I see it, there are two wins you get here.  You've started down the path to using `React` in your app, but you've been able to punt on implementing everything by hand. In the future, if and when you start to build custom components, so you have everything in place. You've also got easy integration for custom Javascript.  The other win is that you've got Bootstrap in there, but it doesn't look like a cat barfed `divs` all over your page. \n\nBe warned: The react-bootstrap library is very much in flux.  Its under pretty active development, but hasn't hit `1.0.0` yet.  That said, its a pretty exciting project and maybe you could contribute?!\n\n\n",
      "html": "<p>Say you're building an app, and you want to put it in front of people. And you don't want it to look shitty. Bootstrap has long been a go to library for this. It does what it says on the tin: it lets you bootstrap your UI and move forward with building the core functionality of your app.</p>\n\n<p>As an example, say you have a dropdown menu that calls some JavaScript code on a model object. With regular bootstrap, you have the functionality in two places: a set of HTML/CSS that implements the markup for the components and a set of javscript that implements the functionality. This creates a confusing situation (although that's kind of where the web is at these days).</p>\n\n<pre><code>&lt;div class=\"dropdown\"&gt;  \n  &lt;button class=\"btn btn-default dropdown-toggle\" type=\"button\" id=\"dropdownMenu1\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"true\"&gt;\n    Dropdown\n    &lt;span class=\"caret\"&gt;&lt;/span&gt;\n  &lt;/button&gt;\n  &lt;ul class=\"dropdown-menu\" aria-labelledby=\"dropdownMenu1\"&gt;\n    &lt;li&gt;&lt;a href=\"#\" id=\"action1\"&gt;One&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=\"#\" id='action2'&gt;Two&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=\"#\" id='action3'&gt;Three&lt;/a&gt;&lt;/li&gt;\n    &lt;li role=\"separator\" class=\"divider\"&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=\"#\"&gt;Separated link&lt;/a&gt;&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/div&gt;\n</code></pre>\n\n<pre><code>var model = {  \n  'one': function(){ alert('one')},\n  'two': function(){ alert('two')},\n  'three': function(){ alert('three')}\n}\n\n$('.dropdown-toggle').dropdown()\n$('#action1').on('click', alerts.one)\n$('#action2').on('click', alerts.two)\n$('#action3').on('click', alerts.three)\n</code></pre>\n\n<p>Enter React. React is Facebook's library for building UI. It's designed around a component based architecture, where functionality and structure are implemented in tandem, in one place. And with this philosophy applied to bootstrap, you get nice clean code that truly gets at the idea of components. The above tab example becomes pretty clean:  </p>\n\n<pre><code>function alertSelect(key) {  \n  alerts[key]()\n}\n\nvar model = {  \n  'one': function(){ alert('one')},\n  'two': function(){ alert('two')},\n  'three': function(){ alert('three')}\n}\n\nconst ToolBar = (  \n    &lt;Dropdown id=\"dropdown-custom-1\" open={true}&gt;\n      &lt;Dropdown.Menu&gt;\n        &lt;MenuItem eventKey=\"one\" onSelect={alertSelect}&gt;One&lt;/MenuItem&gt;\n        &lt;MenuItem eventKey=\"two\" onSelect={alertSelect}&gt;Two action&lt;/MenuItem&gt;\n        &lt;MenuItem eventKey=\"three\" onSelect={alertSelect}&gt;Three&lt;/MenuItem&gt;\n        &lt;MenuItem divider /&gt;\n        &lt;MenuItem eventKey=\"4\"&gt;Separated link&lt;/MenuItem&gt;\n      &lt;/Dropdown.Menu&gt;\n    &lt;/Dropdown&gt;\n)\n\nReactDOM.render(Toolbar, mountNode);  \n</code></pre>\n\n<p>As you can see, we're using JSX syntax to simply instantiate these components (provided by the <code>React-Bootstrap</code> library and render them into our page. And things are much cleaner and self-contained.</p>\n\n<p>As I see it, there are two wins you get here.  You've started down the path to using <code>React</code> in your app, but you've been able to punt on implementing everything by hand. In the future, if and when you start to build custom components, so you have everything in place. You've also got easy integration for custom Javascript.  The other win is that you've got Bootstrap in there, but it doesn't look like a cat barfed <code>divs</code> all over your page. </p>\n\n<p>Be warned: The react-bootstrap library is very much in flux.  Its under pretty active development, but hasn't hit <code>1.0.0</code> yet.  That said, its a pretty exciting project and maybe you could contribute?!</p>",
      "image": null,
      "featured": 0,
      "page": 0,
      "status": "draft",
      "language": "en_US",
      "meta_title": null,
      "meta_description": null,
      "author_id": 1,
      "created_at": "2016-06-01T18:51:49.000Z",
      "created_by": 1,
      "updated_at": "2016-06-21T18:34:51.000Z",
      "updated_by": 1,
      "published_at": null,
      "published_by": null,
      "visibility": "public",
      "mobiledoc": null,
      "amp": null
    },
    {
      "id": 34,
      "uuid": "df4fbb32-89e5-43ca-83cc-5027a5e55cb7",
      "title": "Projects",
      "slug": "projects",
      "markdown": "I just finished up a stint at the [Recurse Center](http://recurse.com), which is a sort of educational retreat for programmers.  While I was there I worked on a number of projects and topics, some of which I explored on this blog. Below are links to some of the major projects I completed.\n\nThe big project I'm working on these day is \n> ##[MTA.FYI](http://mta.fyi)\n\nWhich aims to bring some sense of accountabilty to the New York subway system. At the moment, it's an app to track the uptime of lines using data provided by the MTA. In the future, riders will be able to weigh in on and it'll provided some sort of predictive metrics.\n\n---\n######Links!\n- __[Leader Election](https://github.com/Zanadar/DistSys-Go/pull/2)__     _for Raft distributed concensus algorithm (Go)_\n- __[Scheduler, jobs, and Map and Reduce functions](https://github.com/Zanadar/DistSys-Go/pull/1)__ \n     _for Map/Reduce implementation (Go)_\n- __[Bencode Decoder](https://github.com/Zanadar/benlixir)__ _for bittorrent client (Elixir)_\n- __[Assembler](https://github.com/Zanadar/hack_assembler)__ _for hack CPU (Ruby)_\n- __[ShortStuff](https://github.com/Zanadar/shortstuff)__ _URL shortener (Ruby)_\n\n",
      "html": "<p>I just finished up a stint at the <a href=\"http://recurse.com\">Recurse Center</a>, which is a sort of educational retreat for programmers.  While I was there I worked on a number of projects and topics, some of which I explored on this blog. Below are links to some of the major projects I completed.</p>\n\n<p>The big project I'm working on these day is  </p>\n\n<blockquote>\n  <h2 id=\"mtafyihttpmtafyi\"><a href=\"http://mta.fyi\">MTA.FYI</a></h2>\n</blockquote>\n\n<p>Which aims to bring some sense of accountabilty to the New York subway system. At the moment, it's an app to track the uptime of lines using data provided by the MTA. In the future, riders will be able to weigh in on and it'll provided some sort of predictive metrics.</p>\n\n<hr />\n\n<h6 id=\"links\">Links!</h6>\n\n<ul>\n<li><strong><a href=\"https://github.com/Zanadar/DistSys-Go/pull/2\">Leader Election</a></strong>     <em>for Raft distributed concensus algorithm (Go)</em></li>\n<li><strong><a href=\"https://github.com/Zanadar/DistSys-Go/pull/1\">Scheduler, jobs, and Map and Reduce functions</a></strong> \n <em>for Map/Reduce implementation (Go)</em></li>\n<li><strong><a href=\"https://github.com/Zanadar/benlixir\">Bencode Decoder</a></strong> <em>for bittorrent client (Elixir)</em></li>\n<li><strong><a href=\"https://github.com/Zanadar/hack_assembler\">Assembler</a></strong> <em>for hack CPU (Ruby)</em></li>\n<li><strong><a href=\"https://github.com/Zanadar/shortstuff\">ShortStuff</a></strong> <em>URL shortener (Ruby)</em></li>\n</ul>",
      "image": null,
      "featured": 0,
      "page": 1,
      "status": "published",
      "language": "en_US",
      "meta_title": null,
      "meta_description": null,
      "author_id": 1,
      "created_at": "2016-06-21T18:01:11.000Z",
      "created_by": 1,
      "updated_at": "2016-06-30T18:58:18.000Z",
      "updated_by": 1,
      "published_at": "2016-06-21T18:15:52.000Z",
      "published_by": 1,
      "visibility": "public",
      "mobiledoc": null,
      "amp": null
    },
    {
      "id": 35,
      "uuid": "ba8b5e67-ba99-4da6-a520-fd2d5d9ee435",
      "title": "#each in Elixir (pt 1)",
      "slug": "each-in-elixir-pt-1",
      "markdown": "###### Ruby\nRubyists use `#each` all over the place to iterate though collections.  Its super common to see code along these lines:\n```\n[1, 2, 3].each {|num| puts num}\n```\n\nBasically what `#each` does is execute the given block on every element of the given collection and then return the collection. Its usually used for side effects, rather than the return value.  `Array` implements this method, as do `Hash`, `Range`, and, even more interestingly, `CSV`.\n\n>So how do I do the same thing in Elixir?  \n###### Elixir\nThis simple question gets at some of the difference between these two languages, and so I'll explore it in a little depth.  \n\nHere is some Elixir code roughly equivalent to the above:\n```\nEnum.each([1, 2, 3], fn num -> IO.puts num end)\n\n# Or with function shorthand syntax\n\nEnum.each([1, 2, 3], &(IO.puts &1))\n\n# Or most compact\n\nEnum.each([1, 2, 3], &IO.puts/1)\n\n# Or perhaps most *Elixirishly* \n\n[1, 2, 3] |> Enum.each(&IO.puts/1)\n```\n\n##### Look ma, no methods!\n\nNotice that we're not invoking a method on the array itself (this is actually a list, rather than an array). Elixir has types (list is a type) and functions (`#each` is a function scoped to the `Enum` module).  It does __not__ have objects which implement methods. Basically we're feeding the array into `Enum.each` and also giving *that* function an anonymous function in the second parameter to invoke on every member of the array. \n\nAs for the versions above, that the second uses the shorthand inline function syntax (kind of similar Ruby's symbol to proc).  The `&1` is the first parameter passed to the function.  \n\nThe third version is most compact, but the most foreign looking.  Basically this second parameter demonstrates another version of the shorthand syntax that wraps a function (for which you specify the arity with the `/`) and then passes the first argument implicitly to that function.\n\nThe fourth is the most Elixirish, as it uses the famous `|>` or pipe operator.  This operator basically functions like a pipeline, passing the data along and calling the functions with the data (or return value of a previous function) as the first parameter of the function call.  This allows you to build series of transformations such as:\n```\n\niex> [1, 2, 3, 4] |> Enum.filter(&Integer.is_even/1) |> Enum.map(&(&1 * 3))\n[6, 12]\n```\n\nSo there you have it, `#each` in Elixir.  There a lot more to the story, actually, like how it's possible to enumerate through different kinds of collections that aren't lists (yes, you can pass in tuples, maps, etc into `Enum.each`).  I'll get into how this works in part two of this post, so stay tuned!\n\n",
      "html": "<h6 id=\"ruby\">Ruby</h6>\n\n<p>Rubyists use <code>#each</code> all over the place to iterate though collections.  Its super common to see code along these lines:  </p>\n\n<pre><code>[1, 2, 3].each {|num| puts num}\n</code></pre>\n\n<p>Basically what <code>#each</code> does is execute the given block on every element of the given collection and then return the collection. Its usually used for side effects, rather than the return value.  <code>Array</code> implements this method, as do <code>Hash</code>, <code>Range</code>, and, even more interestingly, <code>CSV</code>.</p>\n\n<blockquote>\n  <p>So how do I do the same thing in Elixir?  </p>\n</blockquote>\n\n<h6 id=\"elixir\">Elixir</h6>\n\n<p>This simple question gets at some of the difference between these two languages, and so I'll explore it in a little depth.  </p>\n\n<p>Here is some Elixir code roughly equivalent to the above:  </p>\n\n<pre><code>Enum.each([1, 2, 3], fn num -&gt; IO.puts num end)\n\n# Or with function shorthand syntax\n\nEnum.each([1, 2, 3], &amp;(IO.puts &amp;1))\n\n# Or most compact\n\nEnum.each([1, 2, 3], &amp;IO.puts/1)\n\n# Or perhaps most *Elixirishly* \n\n[1, 2, 3] |&gt; Enum.each(&amp;IO.puts/1)\n</code></pre>\n\n<h5 id=\"lookmanomethods\">Look ma, no methods!</h5>\n\n<p>Notice that we're not invoking a method on the array itself (this is actually a list, rather than an array). Elixir has types (list is a type) and functions (<code>#each</code> is a function scoped to the <code>Enum</code> module).  It does <strong>not</strong> have objects which implement methods. Basically we're feeding the array into <code>Enum.each</code> and also giving <em>that</em> function an anonymous function in the second parameter to invoke on every member of the array. </p>\n\n<p>As for the versions above, that the second uses the shorthand inline function syntax (kind of similar Ruby's symbol to proc).  The <code>&amp;1</code> is the first parameter passed to the function.  </p>\n\n<p>The third version is most compact, but the most foreign looking.  Basically this second parameter demonstrates another version of the shorthand syntax that wraps a function (for which you specify the arity with the <code>/</code>) and then passes the first argument implicitly to that function.</p>\n\n<p>The fourth is the most Elixirish, as it uses the famous <code>|&gt;</code> or pipe operator.  This operator basically functions like a pipeline, passing the data along and calling the functions with the data (or return value of a previous function) as the first parameter of the function call.  This allows you to build series of transformations such as:  </p>\n\n<pre><code>iex&gt; [1, 2, 3, 4] |&gt; Enum.filter(&amp;Integer.is_even/1) |&gt; Enum.map(&amp;(&amp;1 * 3))  \n[6, 12]\n</code></pre>\n\n<p>So there you have it, <code>#each</code> in Elixir.  There a lot more to the story, actually, like how it's possible to enumerate through different kinds of collections that aren't lists (yes, you can pass in tuples, maps, etc into <code>Enum.each</code>).  I'll get into how this works in part two of this post, so stay tuned!</p>",
      "image": null,
      "featured": 0,
      "page": 0,
      "status": "draft",
      "language": "en_US",
      "meta_title": null,
      "meta_description": null,
      "author_id": 1,
      "created_at": "2016-09-04T22:03:00.000Z",
      "created_by": 1,
      "updated_at": "2016-09-15T18:31:45.000Z",
      "updated_by": 1,
      "published_at": null,
      "published_by": null,
      "visibility": "public",
      "mobiledoc": null,
      "amp": null
    },
    {
      "id": 36,
      "uuid": "972e5683-7a72-4934-8a9f-d10933b550da",
      "title": "#each in Elixir pt II, Son of Enum",
      "slug": "each-in-elixir-pt-ii-son-of-enum",
      "markdown": "\n###### Pt. 2\n\nI mentioned earlier that many Ruby classes implement `each`.  Ruby is an OO language, so that makes sense, but what happens when I want to call `#each` in Elixir on something other than a list.  I'll stress again, the list is not an object, its a type.  So we can't have different objects implementing the method in their particular way.  \n\nLets delve a bit deeper by looking in the standard library for the [implementation](https://github.com/elixir-lang/elixir/blob/master/lib/elixir/lib/enum.ex#L632) of this function: \n```\ndef each(enumerable, fun) when is_list(enumerable) and is_function(fun, 1) do\n    :lists.foreach(fun, enumerable)\n    :ok\n  end\n\ndef each(enumerable, fun) when is_function(fun, 1) do\n    reduce(enumerable, nil, fn(entry, _) ->\n      fun.(entry)\n      nil\n    end)\n    :ok\nend\n```\n\nI've cleaned this up a bit, but the skeleton is there.  This code my look really weird if you're not used to reading Elixir, but I'll walk you through it slowly.  One of the cool things about this language is that much of Elixir is written in Elixir :fireworks: (as opposed to Ruby, which is mostly written in C). So if you lean the basic syntax, understanding the functioning of the rest of the language becomes straightforward.\n\nAt a high level, what we see are two definitions of `#each`.  Wait, what?  Two definitions?  Yup.  Pattern matching.  I won't go into that now, but this is where you'd usually see a case or switch statement in other languages.  Okay so reading the first `#each` definition we notice that clauses in the function head (those are called guard clauses).  This function will match on our earlier examples because the enumerable (the list in this case) is a list. The function then executes some other weird looking code. `:lists.forEach`.  This is actually Erlang code being called directly from the Elixir code, which .  \n\nhttps://imgflip.com/i/1a4h5w\nhttps://imgflip.com/i/1a5c63\n",
      "html": "<h6 id=\"pt2\">Pt. 2</h6>\n\n<p>I mentioned earlier that many Ruby classes implement <code>each</code>.  Ruby is an OO language, so that makes sense, but what happens when I want to call <code>#each</code> in Elixir on something other than a list.  I'll stress again, the list is not an object, its a type.  So we can't have different objects implementing the method in their particular way.  </p>\n\n<p>Lets delve a bit deeper by looking in the standard library for the <a href=\"https://github.com/elixir-lang/elixir/blob/master/lib/elixir/lib/enum.ex#L632\">implementation</a> of this function:  </p>\n\n<pre><code>def each(enumerable, fun) when is_list(enumerable) and is_function(fun, 1) do  \n    :lists.foreach(fun, enumerable)\n    :ok\n  end\n\ndef each(enumerable, fun) when is_function(fun, 1) do  \n    reduce(enumerable, nil, fn(entry, _) -&gt;\n      fun.(entry)\n      nil\n    end)\n    :ok\nend  \n</code></pre>\n\n<p>I've cleaned this up a bit, but the skeleton is there.  This code my look really weird if you're not used to reading Elixir, but I'll walk you through it slowly.  One of the cool things about this language is that much of Elixir is written in Elixir :fireworks: (as opposed to Ruby, which is mostly written in C). So if you lean the basic syntax, understanding the functioning of the rest of the language becomes straightforward.</p>\n\n<p>At a high level, what we see are two definitions of <code>#each</code>.  Wait, what?  Two definitions?  Yup.  Pattern matching.  I won't go into that now, but this is where you'd usually see a case or switch statement in other languages.  Okay so reading the first <code>#each</code> definition we notice that clauses in the function head (those are called guard clauses).  This function will match on our earlier examples because the enumerable (the list in this case) is a list. The function then executes some other weird looking code. <code>:lists.forEach</code>.  This is actually Erlang code being called directly from the Elixir code, which .  </p>\n\n<p><a href=\"https://imgflip.com/i/1a4h5w\">https://imgflip.com/i/1a4h5w</a> <br />\n<a href=\"https://imgflip.com/i/1a5c63\">https://imgflip.com/i/1a5c63</a></p>",
      "image": null,
      "featured": 0,
      "page": 0,
      "status": "draft",
      "language": "en_US",
      "meta_title": null,
      "meta_description": null,
      "author_id": 1,
      "created_at": "2016-09-07T13:59:47.000Z",
      "created_by": 1,
      "updated_at": "2016-09-15T18:47:05.000Z",
      "updated_by": 1,
      "published_at": null,
      "published_by": null,
      "visibility": "public",
      "mobiledoc": null,
      "amp": null
    }
  ]
}
